
7_uart_modular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080014b4  080014b4  000114b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001570  08001570  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001570  08001570  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001570  08001570  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001570  08001570  00011570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001574  08001574  00011574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  080015dc  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080015dc  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000290a  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000769  00000000  00000000  0002299e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  00023108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000108  00000000  00000000  00023258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a817  00000000  00000000  00023360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000019a8  00000000  00000000  0003db77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000905c7  00000000  00000000  0003f51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfae6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bdc  00000000  00000000  000cfb3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800149c 	.word	0x0800149c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	0800149c 	.word	0x0800149c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:




int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0

	uart2_tx_init();			//Configure uart tx gpio pin
 80002b4:	f000 f8b6 	bl	8000424 <uart2_tx_init>
	while(1)
	{

	printf("Hello from STM32F4..............\n\r");
 80002b8:	4801      	ldr	r0, [pc, #4]	; (80002c0 <main+0x10>)
 80002ba:	f000 f999 	bl	80005f0 <iprintf>
 80002be:	e7fb      	b.n	80002b8 <main+0x8>
 80002c0:	080014b4 	.word	0x080014b4

080002c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002d0:	2300      	movs	r3, #0
 80002d2:	617b      	str	r3, [r7, #20]
 80002d4:	e00a      	b.n	80002ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80002d6:	f3af 8000 	nop.w
 80002da:	4601      	mov	r1, r0
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	1c5a      	adds	r2, r3, #1
 80002e0:	60ba      	str	r2, [r7, #8]
 80002e2:	b2ca      	uxtb	r2, r1
 80002e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	3301      	adds	r3, #1
 80002ea:	617b      	str	r3, [r7, #20]
 80002ec:	697a      	ldr	r2, [r7, #20]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	dbf0      	blt.n	80002d6 <_read+0x12>
	}

return len;
 80002f4:	687b      	ldr	r3, [r7, #4]
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	3718      	adds	r7, #24
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}

080002fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002fe:	b580      	push	{r7, lr}
 8000300:	b086      	sub	sp, #24
 8000302:	af00      	add	r7, sp, #0
 8000304:	60f8      	str	r0, [r7, #12]
 8000306:	60b9      	str	r1, [r7, #8]
 8000308:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800030a:	2300      	movs	r3, #0
 800030c:	617b      	str	r3, [r7, #20]
 800030e:	e009      	b.n	8000324 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	1c5a      	adds	r2, r3, #1
 8000314:	60ba      	str	r2, [r7, #8]
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	4618      	mov	r0, r3
 800031a:	f000 f877 	bl	800040c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	3301      	adds	r3, #1
 8000322:	617b      	str	r3, [r7, #20]
 8000324:	697a      	ldr	r2, [r7, #20]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	429a      	cmp	r2, r3
 800032a:	dbf1      	blt.n	8000310 <_write+0x12>
	}
	return len;
 800032c:	687b      	ldr	r3, [r7, #4]
}
 800032e:	4618      	mov	r0, r3
 8000330:	3718      	adds	r7, #24
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <_close>:

int _close(int file)
{
 8000336:	b480      	push	{r7}
 8000338:	b083      	sub	sp, #12
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
	return -1;
 800033e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000342:	4618      	mov	r0, r3
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr

0800034e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800034e:	b480      	push	{r7}
 8000350:	b083      	sub	sp, #12
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
 8000356:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800035e:	605a      	str	r2, [r3, #4]
	return 0;
 8000360:	2300      	movs	r3, #0
}
 8000362:	4618      	mov	r0, r3
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <_isatty>:

int _isatty(int file)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
	return 1;
 8000376:	2301      	movs	r3, #1
}
 8000378:	4618      	mov	r0, r3
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr

08000384 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	607a      	str	r2, [r7, #4]
	return 0;
 8000390:	2300      	movs	r3, #0
}
 8000392:	4618      	mov	r0, r3
 8000394:	3714      	adds	r7, #20
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
	...

080003a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003a8:	4a14      	ldr	r2, [pc, #80]	; (80003fc <_sbrk+0x5c>)
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <_sbrk+0x60>)
 80003ac:	1ad3      	subs	r3, r2, r3
 80003ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003b0:	697b      	ldr	r3, [r7, #20]
 80003b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003b4:	4b13      	ldr	r3, [pc, #76]	; (8000404 <_sbrk+0x64>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d102      	bne.n	80003c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <_sbrk+0x64>)
 80003be:	4a12      	ldr	r2, [pc, #72]	; (8000408 <_sbrk+0x68>)
 80003c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <_sbrk+0x64>)
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4413      	add	r3, r2
 80003ca:	693a      	ldr	r2, [r7, #16]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d207      	bcs.n	80003e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003d0:	f000 f8dc 	bl	800058c <__errno>
 80003d4:	4603      	mov	r3, r0
 80003d6:	220c      	movs	r2, #12
 80003d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003da:	f04f 33ff 	mov.w	r3, #4294967295
 80003de:	e009      	b.n	80003f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003e0:	4b08      	ldr	r3, [pc, #32]	; (8000404 <_sbrk+0x64>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003e6:	4b07      	ldr	r3, [pc, #28]	; (8000404 <_sbrk+0x64>)
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4413      	add	r3, r2
 80003ee:	4a05      	ldr	r2, [pc, #20]	; (8000404 <_sbrk+0x64>)
 80003f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003f2:	68fb      	ldr	r3, [r7, #12]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3718      	adds	r7, #24
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20020000 	.word	0x20020000
 8000400:	00000400 	.word	0x00000400
 8000404:	20000080 	.word	0x20000080
 8000408:	200000a0 	.word	0x200000a0

0800040c <__io_putchar>:


// function for printf

int __io_putchar(int ch)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	f000 f851 	bl	80004bc <uart2_write>
	return ch;
 800041a:	687b      	ldr	r3, [r7, #4]
}
 800041c:	4618      	mov	r0, r3
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <uart2_tx_init>:


//Creating necessary functions for UART configuration

void uart2_tx_init(void)
	{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0

	/**************Configure uart tx gpio pin***************/

	/*Enable Clock Access for GPIOA(GPIOA because pins is PA2)*/
	RCC->AHB1ENR |= GPIOAEN;
 8000428:	4b20      	ldr	r3, [pc, #128]	; (80004ac <uart2_tx_init+0x88>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a1f      	ldr	r2, [pc, #124]	; (80004ac <uart2_tx_init+0x88>)
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6313      	str	r3, [r2, #48]	; 0x30
	/*Set PA2 mode to Alternate Function Mode*/
	GPIOA->MODER &=~(1<<4); // set bit 4 to 0
 8000434:	4b1e      	ldr	r3, [pc, #120]	; (80004b0 <uart2_tx_init+0x8c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a1d      	ldr	r2, [pc, #116]	; (80004b0 <uart2_tx_init+0x8c>)
 800043a:	f023 0310 	bic.w	r3, r3, #16
 800043e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1<<5); // set bit 5 to 1
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <uart2_tx_init+0x8c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a1a      	ldr	r2, [pc, #104]	; (80004b0 <uart2_tx_init+0x8c>)
 8000446:	f043 0320 	orr.w	r3, r3, #32
 800044a:	6013      	str	r3, [r2, #0]
	/*Set PA2 alternate function type to UART_TX (AF7)*/
	GPIOA->AFR[0] |= (1U<<8);// AFRL -> AFR[0], AFRH -> AFR[1], Setting AF7 to AFRL2 (bit 8)
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <uart2_tx_init+0x8c>)
 800044e:	6a1b      	ldr	r3, [r3, #32]
 8000450:	4a17      	ldr	r2, [pc, #92]	; (80004b0 <uart2_tx_init+0x8c>)
 8000452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000456:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);// Setting AF7 to AFRL2 (bit 9)
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <uart2_tx_init+0x8c>)
 800045a:	6a1b      	ldr	r3, [r3, #32]
 800045c:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <uart2_tx_init+0x8c>)
 800045e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000462:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10); //Setting AF7 to AFRL2 (bit 10)
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <uart2_tx_init+0x8c>)
 8000466:	6a1b      	ldr	r3, [r3, #32]
 8000468:	4a11      	ldr	r2, [pc, #68]	; (80004b0 <uart2_tx_init+0x8c>)
 800046a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800046e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~ (1U<<11);//Setting AF7 to AFRL2 (bit 11)
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <uart2_tx_init+0x8c>)
 8000472:	6a1b      	ldr	r3, [r3, #32]
 8000474:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <uart2_tx_init+0x8c>)
 8000476:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800047a:	6213      	str	r3, [r2, #32]


	/****************Configure UART module************************/
	/*Enable clock access to uart2*/
	RCC->APB1ENR |= UART2EN ;
 800047c:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <uart2_tx_init+0x88>)
 800047e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000480:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <uart2_tx_init+0x88>)
 8000482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000486:	6413      	str	r3, [r2, #64]	; 0x40
	/*Configure baud rate*/
	uart_set_baudrate(USART2, APB1_CLK, 115200);
 8000488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800048c:	4909      	ldr	r1, [pc, #36]	; (80004b4 <uart2_tx_init+0x90>)
 800048e:	480a      	ldr	r0, [pc, #40]	; (80004b8 <uart2_tx_init+0x94>)
 8000490:	f000 f82c 	bl	80004ec <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = CR1_TE; // No OR operation because we want to clear all other bits and write to bit 3 only
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <uart2_tx_init+0x94>)
 8000496:	2208      	movs	r2, #8
 8000498:	60da      	str	r2, [r3, #12]

	/*Enable uart2 module*/
	USART2->CR1 |= U_E	;// Enable UART
 800049a:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <uart2_tx_init+0x94>)
 800049c:	68db      	ldr	r3, [r3, #12]
 800049e:	4a06      	ldr	r2, [pc, #24]	; (80004b8 <uart2_tx_init+0x94>)
 80004a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004a4:	60d3      	str	r3, [r2, #12]
	}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40023800 	.word	0x40023800
 80004b0:	40020000 	.word	0x40020000
 80004b4:	00f42400 	.word	0x00f42400
 80004b8:	40004400 	.word	0x40004400

080004bc <uart2_write>:

/****************Function for writing a character to UART************************/

void uart2_write(int ch)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/

	// For checking transmit data register is empty, So if we read SR_TXE and perform and operation (1U<<7)
	//If TRUE then we can conclude that the transmit data register is not empty
	while(!(USART2->SR & SR_TXE)) {}   // while(!(USART2->SR & SR_TXE)) -> while((USART2->SR & SR_TXE) is false[!])
 80004c4:	bf00      	nop
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <uart2_write+0x2c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d0f9      	beq.n	80004c6 <uart2_write+0xa>
	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <uart2_write+0x2c>)
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	6053      	str	r3, [r2, #4]

}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40004400 	.word	0x40004400

080004ec <uart_set_baudrate>:

/*Function for Computing Baud Rate*/


static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk, uint32_t BaudRatre )
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]

USARTx->BRR = compute_uart_bd(PeriphClk, BaudRatre);
 80004f8:	6879      	ldr	r1, [r7, #4]
 80004fa:	68b8      	ldr	r0, [r7, #8]
 80004fc:	f000 f808 	bl	8000510 <compute_uart_bd>
 8000500:	4603      	mov	r3, r0
 8000502:	461a      	mov	r2, r3
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	609a      	str	r2, [r3, #8]


}
 8000508:	bf00      	nop
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <compute_uart_bd>:


static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRatre)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
	return (( PeriphClk + (BaudRatre/2U))/BaudRatre);
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	085a      	lsrs	r2, r3, #1
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	441a      	add	r2, r3
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	fbb2 f3f3 	udiv	r3, r2, r3
 8000528:	b29b      	uxth	r3, r3
	}
 800052a:	4618      	mov	r0, r3
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
	...

08000538 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800053a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800053c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <LoopForever+0x6>)
  ldr r1, =_edata
 8000542:	490d      	ldr	r1, [pc, #52]	; (8000578 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <LoopForever+0xe>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000548:	e002      	b.n	8000550 <LoopCopyDataInit>

0800054a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800054c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054e:	3304      	adds	r3, #4

08000550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000554:	d3f9      	bcc.n	800054a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000558:	4c0a      	ldr	r4, [pc, #40]	; (8000584 <LoopForever+0x16>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800055c:	e001      	b.n	8000562 <LoopFillZerobss>

0800055e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000560:	3204      	adds	r2, #4

08000562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000564:	d3fb      	bcc.n	800055e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000566:	f000 f817 	bl	8000598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056a:	f7ff fea1 	bl	80002b0 <main>

0800056e <LoopForever>:

LoopForever:
    b LoopForever
 800056e:	e7fe      	b.n	800056e <LoopForever>
  ldr   r0, =_estack
 8000570:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000578:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800057c:	08001578 	.word	0x08001578
  ldr r2, =_sbss
 8000580:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000584:	2000009c 	.word	0x2000009c

08000588 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000588:	e7fe      	b.n	8000588 <ADC_IRQHandler>
	...

0800058c <__errno>:
 800058c:	4b01      	ldr	r3, [pc, #4]	; (8000594 <__errno+0x8>)
 800058e:	6818      	ldr	r0, [r3, #0]
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000000 	.word	0x20000000

08000598 <__libc_init_array>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	4d0d      	ldr	r5, [pc, #52]	; (80005d0 <__libc_init_array+0x38>)
 800059c:	4c0d      	ldr	r4, [pc, #52]	; (80005d4 <__libc_init_array+0x3c>)
 800059e:	1b64      	subs	r4, r4, r5
 80005a0:	10a4      	asrs	r4, r4, #2
 80005a2:	2600      	movs	r6, #0
 80005a4:	42a6      	cmp	r6, r4
 80005a6:	d109      	bne.n	80005bc <__libc_init_array+0x24>
 80005a8:	4d0b      	ldr	r5, [pc, #44]	; (80005d8 <__libc_init_array+0x40>)
 80005aa:	4c0c      	ldr	r4, [pc, #48]	; (80005dc <__libc_init_array+0x44>)
 80005ac:	f000 ff76 	bl	800149c <_init>
 80005b0:	1b64      	subs	r4, r4, r5
 80005b2:	10a4      	asrs	r4, r4, #2
 80005b4:	2600      	movs	r6, #0
 80005b6:	42a6      	cmp	r6, r4
 80005b8:	d105      	bne.n	80005c6 <__libc_init_array+0x2e>
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c0:	4798      	blx	r3
 80005c2:	3601      	adds	r6, #1
 80005c4:	e7ee      	b.n	80005a4 <__libc_init_array+0xc>
 80005c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ca:	4798      	blx	r3
 80005cc:	3601      	adds	r6, #1
 80005ce:	e7f2      	b.n	80005b6 <__libc_init_array+0x1e>
 80005d0:	08001570 	.word	0x08001570
 80005d4:	08001570 	.word	0x08001570
 80005d8:	08001570 	.word	0x08001570
 80005dc:	08001574 	.word	0x08001574

080005e0 <memset>:
 80005e0:	4402      	add	r2, r0
 80005e2:	4603      	mov	r3, r0
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d100      	bne.n	80005ea <memset+0xa>
 80005e8:	4770      	bx	lr
 80005ea:	f803 1b01 	strb.w	r1, [r3], #1
 80005ee:	e7f9      	b.n	80005e4 <memset+0x4>

080005f0 <iprintf>:
 80005f0:	b40f      	push	{r0, r1, r2, r3}
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <iprintf+0x2c>)
 80005f4:	b513      	push	{r0, r1, r4, lr}
 80005f6:	681c      	ldr	r4, [r3, #0]
 80005f8:	b124      	cbz	r4, 8000604 <iprintf+0x14>
 80005fa:	69a3      	ldr	r3, [r4, #24]
 80005fc:	b913      	cbnz	r3, 8000604 <iprintf+0x14>
 80005fe:	4620      	mov	r0, r4
 8000600:	f000 f866 	bl	80006d0 <__sinit>
 8000604:	ab05      	add	r3, sp, #20
 8000606:	9a04      	ldr	r2, [sp, #16]
 8000608:	68a1      	ldr	r1, [r4, #8]
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	4620      	mov	r0, r4
 800060e:	f000 f983 	bl	8000918 <_vfiprintf_r>
 8000612:	b002      	add	sp, #8
 8000614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000618:	b004      	add	sp, #16
 800061a:	4770      	bx	lr
 800061c:	20000000 	.word	0x20000000

08000620 <std>:
 8000620:	2300      	movs	r3, #0
 8000622:	b510      	push	{r4, lr}
 8000624:	4604      	mov	r4, r0
 8000626:	e9c0 3300 	strd	r3, r3, [r0]
 800062a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800062e:	6083      	str	r3, [r0, #8]
 8000630:	8181      	strh	r1, [r0, #12]
 8000632:	6643      	str	r3, [r0, #100]	; 0x64
 8000634:	81c2      	strh	r2, [r0, #14]
 8000636:	6183      	str	r3, [r0, #24]
 8000638:	4619      	mov	r1, r3
 800063a:	2208      	movs	r2, #8
 800063c:	305c      	adds	r0, #92	; 0x5c
 800063e:	f7ff ffcf 	bl	80005e0 <memset>
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <std+0x38>)
 8000644:	6263      	str	r3, [r4, #36]	; 0x24
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <std+0x3c>)
 8000648:	62a3      	str	r3, [r4, #40]	; 0x28
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <std+0x40>)
 800064c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <std+0x44>)
 8000650:	6224      	str	r4, [r4, #32]
 8000652:	6323      	str	r3, [r4, #48]	; 0x30
 8000654:	bd10      	pop	{r4, pc}
 8000656:	bf00      	nop
 8000658:	08000ec1 	.word	0x08000ec1
 800065c:	08000ee3 	.word	0x08000ee3
 8000660:	08000f1b 	.word	0x08000f1b
 8000664:	08000f3f 	.word	0x08000f3f

08000668 <_cleanup_r>:
 8000668:	4901      	ldr	r1, [pc, #4]	; (8000670 <_cleanup_r+0x8>)
 800066a:	f000 b8af 	b.w	80007cc <_fwalk_reent>
 800066e:	bf00      	nop
 8000670:	08001219 	.word	0x08001219

08000674 <__sfmoreglue>:
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	1e4a      	subs	r2, r1, #1
 8000678:	2568      	movs	r5, #104	; 0x68
 800067a:	4355      	muls	r5, r2
 800067c:	460e      	mov	r6, r1
 800067e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000682:	f000 f8c5 	bl	8000810 <_malloc_r>
 8000686:	4604      	mov	r4, r0
 8000688:	b140      	cbz	r0, 800069c <__sfmoreglue+0x28>
 800068a:	2100      	movs	r1, #0
 800068c:	e9c0 1600 	strd	r1, r6, [r0]
 8000690:	300c      	adds	r0, #12
 8000692:	60a0      	str	r0, [r4, #8]
 8000694:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000698:	f7ff ffa2 	bl	80005e0 <memset>
 800069c:	4620      	mov	r0, r4
 800069e:	bd70      	pop	{r4, r5, r6, pc}

080006a0 <__sfp_lock_acquire>:
 80006a0:	4801      	ldr	r0, [pc, #4]	; (80006a8 <__sfp_lock_acquire+0x8>)
 80006a2:	f000 b8b3 	b.w	800080c <__retarget_lock_acquire_recursive>
 80006a6:	bf00      	nop
 80006a8:	20000094 	.word	0x20000094

080006ac <__sfp_lock_release>:
 80006ac:	4801      	ldr	r0, [pc, #4]	; (80006b4 <__sfp_lock_release+0x8>)
 80006ae:	f000 b8ae 	b.w	800080e <__retarget_lock_release_recursive>
 80006b2:	bf00      	nop
 80006b4:	20000094 	.word	0x20000094

080006b8 <__sinit_lock_acquire>:
 80006b8:	4801      	ldr	r0, [pc, #4]	; (80006c0 <__sinit_lock_acquire+0x8>)
 80006ba:	f000 b8a7 	b.w	800080c <__retarget_lock_acquire_recursive>
 80006be:	bf00      	nop
 80006c0:	2000008f 	.word	0x2000008f

080006c4 <__sinit_lock_release>:
 80006c4:	4801      	ldr	r0, [pc, #4]	; (80006cc <__sinit_lock_release+0x8>)
 80006c6:	f000 b8a2 	b.w	800080e <__retarget_lock_release_recursive>
 80006ca:	bf00      	nop
 80006cc:	2000008f 	.word	0x2000008f

080006d0 <__sinit>:
 80006d0:	b510      	push	{r4, lr}
 80006d2:	4604      	mov	r4, r0
 80006d4:	f7ff fff0 	bl	80006b8 <__sinit_lock_acquire>
 80006d8:	69a3      	ldr	r3, [r4, #24]
 80006da:	b11b      	cbz	r3, 80006e4 <__sinit+0x14>
 80006dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006e0:	f7ff bff0 	b.w	80006c4 <__sinit_lock_release>
 80006e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80006e8:	6523      	str	r3, [r4, #80]	; 0x50
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <__sinit+0x68>)
 80006ec:	4a13      	ldr	r2, [pc, #76]	; (800073c <__sinit+0x6c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80006f2:	42a3      	cmp	r3, r4
 80006f4:	bf04      	itt	eq
 80006f6:	2301      	moveq	r3, #1
 80006f8:	61a3      	streq	r3, [r4, #24]
 80006fa:	4620      	mov	r0, r4
 80006fc:	f000 f820 	bl	8000740 <__sfp>
 8000700:	6060      	str	r0, [r4, #4]
 8000702:	4620      	mov	r0, r4
 8000704:	f000 f81c 	bl	8000740 <__sfp>
 8000708:	60a0      	str	r0, [r4, #8]
 800070a:	4620      	mov	r0, r4
 800070c:	f000 f818 	bl	8000740 <__sfp>
 8000710:	2200      	movs	r2, #0
 8000712:	60e0      	str	r0, [r4, #12]
 8000714:	2104      	movs	r1, #4
 8000716:	6860      	ldr	r0, [r4, #4]
 8000718:	f7ff ff82 	bl	8000620 <std>
 800071c:	68a0      	ldr	r0, [r4, #8]
 800071e:	2201      	movs	r2, #1
 8000720:	2109      	movs	r1, #9
 8000722:	f7ff ff7d 	bl	8000620 <std>
 8000726:	68e0      	ldr	r0, [r4, #12]
 8000728:	2202      	movs	r2, #2
 800072a:	2112      	movs	r1, #18
 800072c:	f7ff ff78 	bl	8000620 <std>
 8000730:	2301      	movs	r3, #1
 8000732:	61a3      	str	r3, [r4, #24]
 8000734:	e7d2      	b.n	80006dc <__sinit+0xc>
 8000736:	bf00      	nop
 8000738:	080014d8 	.word	0x080014d8
 800073c:	08000669 	.word	0x08000669

08000740 <__sfp>:
 8000740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000742:	4607      	mov	r7, r0
 8000744:	f7ff ffac 	bl	80006a0 <__sfp_lock_acquire>
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <__sfp+0x84>)
 800074a:	681e      	ldr	r6, [r3, #0]
 800074c:	69b3      	ldr	r3, [r6, #24]
 800074e:	b913      	cbnz	r3, 8000756 <__sfp+0x16>
 8000750:	4630      	mov	r0, r6
 8000752:	f7ff ffbd 	bl	80006d0 <__sinit>
 8000756:	3648      	adds	r6, #72	; 0x48
 8000758:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800075c:	3b01      	subs	r3, #1
 800075e:	d503      	bpl.n	8000768 <__sfp+0x28>
 8000760:	6833      	ldr	r3, [r6, #0]
 8000762:	b30b      	cbz	r3, 80007a8 <__sfp+0x68>
 8000764:	6836      	ldr	r6, [r6, #0]
 8000766:	e7f7      	b.n	8000758 <__sfp+0x18>
 8000768:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800076c:	b9d5      	cbnz	r5, 80007a4 <__sfp+0x64>
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <__sfp+0x88>)
 8000770:	60e3      	str	r3, [r4, #12]
 8000772:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000776:	6665      	str	r5, [r4, #100]	; 0x64
 8000778:	f000 f847 	bl	800080a <__retarget_lock_init_recursive>
 800077c:	f7ff ff96 	bl	80006ac <__sfp_lock_release>
 8000780:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000784:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000788:	6025      	str	r5, [r4, #0]
 800078a:	61a5      	str	r5, [r4, #24]
 800078c:	2208      	movs	r2, #8
 800078e:	4629      	mov	r1, r5
 8000790:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000794:	f7ff ff24 	bl	80005e0 <memset>
 8000798:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800079c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80007a0:	4620      	mov	r0, r4
 80007a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007a4:	3468      	adds	r4, #104	; 0x68
 80007a6:	e7d9      	b.n	800075c <__sfp+0x1c>
 80007a8:	2104      	movs	r1, #4
 80007aa:	4638      	mov	r0, r7
 80007ac:	f7ff ff62 	bl	8000674 <__sfmoreglue>
 80007b0:	4604      	mov	r4, r0
 80007b2:	6030      	str	r0, [r6, #0]
 80007b4:	2800      	cmp	r0, #0
 80007b6:	d1d5      	bne.n	8000764 <__sfp+0x24>
 80007b8:	f7ff ff78 	bl	80006ac <__sfp_lock_release>
 80007bc:	230c      	movs	r3, #12
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	e7ee      	b.n	80007a0 <__sfp+0x60>
 80007c2:	bf00      	nop
 80007c4:	080014d8 	.word	0x080014d8
 80007c8:	ffff0001 	.word	0xffff0001

080007cc <_fwalk_reent>:
 80007cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007d0:	4606      	mov	r6, r0
 80007d2:	4688      	mov	r8, r1
 80007d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80007d8:	2700      	movs	r7, #0
 80007da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007de:	f1b9 0901 	subs.w	r9, r9, #1
 80007e2:	d505      	bpl.n	80007f0 <_fwalk_reent+0x24>
 80007e4:	6824      	ldr	r4, [r4, #0]
 80007e6:	2c00      	cmp	r4, #0
 80007e8:	d1f7      	bne.n	80007da <_fwalk_reent+0xe>
 80007ea:	4638      	mov	r0, r7
 80007ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007f0:	89ab      	ldrh	r3, [r5, #12]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d907      	bls.n	8000806 <_fwalk_reent+0x3a>
 80007f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007fa:	3301      	adds	r3, #1
 80007fc:	d003      	beq.n	8000806 <_fwalk_reent+0x3a>
 80007fe:	4629      	mov	r1, r5
 8000800:	4630      	mov	r0, r6
 8000802:	47c0      	blx	r8
 8000804:	4307      	orrs	r7, r0
 8000806:	3568      	adds	r5, #104	; 0x68
 8000808:	e7e9      	b.n	80007de <_fwalk_reent+0x12>

0800080a <__retarget_lock_init_recursive>:
 800080a:	4770      	bx	lr

0800080c <__retarget_lock_acquire_recursive>:
 800080c:	4770      	bx	lr

0800080e <__retarget_lock_release_recursive>:
 800080e:	4770      	bx	lr

08000810 <_malloc_r>:
 8000810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000812:	1ccd      	adds	r5, r1, #3
 8000814:	f025 0503 	bic.w	r5, r5, #3
 8000818:	3508      	adds	r5, #8
 800081a:	2d0c      	cmp	r5, #12
 800081c:	bf38      	it	cc
 800081e:	250c      	movcc	r5, #12
 8000820:	2d00      	cmp	r5, #0
 8000822:	4606      	mov	r6, r0
 8000824:	db01      	blt.n	800082a <_malloc_r+0x1a>
 8000826:	42a9      	cmp	r1, r5
 8000828:	d903      	bls.n	8000832 <_malloc_r+0x22>
 800082a:	230c      	movs	r3, #12
 800082c:	6033      	str	r3, [r6, #0]
 800082e:	2000      	movs	r0, #0
 8000830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000832:	f000 fda3 	bl	800137c <__malloc_lock>
 8000836:	4921      	ldr	r1, [pc, #132]	; (80008bc <_malloc_r+0xac>)
 8000838:	680a      	ldr	r2, [r1, #0]
 800083a:	4614      	mov	r4, r2
 800083c:	b99c      	cbnz	r4, 8000866 <_malloc_r+0x56>
 800083e:	4f20      	ldr	r7, [pc, #128]	; (80008c0 <_malloc_r+0xb0>)
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	b923      	cbnz	r3, 800084e <_malloc_r+0x3e>
 8000844:	4621      	mov	r1, r4
 8000846:	4630      	mov	r0, r6
 8000848:	f000 fb2a 	bl	8000ea0 <_sbrk_r>
 800084c:	6038      	str	r0, [r7, #0]
 800084e:	4629      	mov	r1, r5
 8000850:	4630      	mov	r0, r6
 8000852:	f000 fb25 	bl	8000ea0 <_sbrk_r>
 8000856:	1c43      	adds	r3, r0, #1
 8000858:	d123      	bne.n	80008a2 <_malloc_r+0x92>
 800085a:	230c      	movs	r3, #12
 800085c:	6033      	str	r3, [r6, #0]
 800085e:	4630      	mov	r0, r6
 8000860:	f000 fd92 	bl	8001388 <__malloc_unlock>
 8000864:	e7e3      	b.n	800082e <_malloc_r+0x1e>
 8000866:	6823      	ldr	r3, [r4, #0]
 8000868:	1b5b      	subs	r3, r3, r5
 800086a:	d417      	bmi.n	800089c <_malloc_r+0x8c>
 800086c:	2b0b      	cmp	r3, #11
 800086e:	d903      	bls.n	8000878 <_malloc_r+0x68>
 8000870:	6023      	str	r3, [r4, #0]
 8000872:	441c      	add	r4, r3
 8000874:	6025      	str	r5, [r4, #0]
 8000876:	e004      	b.n	8000882 <_malloc_r+0x72>
 8000878:	6863      	ldr	r3, [r4, #4]
 800087a:	42a2      	cmp	r2, r4
 800087c:	bf0c      	ite	eq
 800087e:	600b      	streq	r3, [r1, #0]
 8000880:	6053      	strne	r3, [r2, #4]
 8000882:	4630      	mov	r0, r6
 8000884:	f000 fd80 	bl	8001388 <__malloc_unlock>
 8000888:	f104 000b 	add.w	r0, r4, #11
 800088c:	1d23      	adds	r3, r4, #4
 800088e:	f020 0007 	bic.w	r0, r0, #7
 8000892:	1ac2      	subs	r2, r0, r3
 8000894:	d0cc      	beq.n	8000830 <_malloc_r+0x20>
 8000896:	1a1b      	subs	r3, r3, r0
 8000898:	50a3      	str	r3, [r4, r2]
 800089a:	e7c9      	b.n	8000830 <_malloc_r+0x20>
 800089c:	4622      	mov	r2, r4
 800089e:	6864      	ldr	r4, [r4, #4]
 80008a0:	e7cc      	b.n	800083c <_malloc_r+0x2c>
 80008a2:	1cc4      	adds	r4, r0, #3
 80008a4:	f024 0403 	bic.w	r4, r4, #3
 80008a8:	42a0      	cmp	r0, r4
 80008aa:	d0e3      	beq.n	8000874 <_malloc_r+0x64>
 80008ac:	1a21      	subs	r1, r4, r0
 80008ae:	4630      	mov	r0, r6
 80008b0:	f000 faf6 	bl	8000ea0 <_sbrk_r>
 80008b4:	3001      	adds	r0, #1
 80008b6:	d1dd      	bne.n	8000874 <_malloc_r+0x64>
 80008b8:	e7cf      	b.n	800085a <_malloc_r+0x4a>
 80008ba:	bf00      	nop
 80008bc:	20000084 	.word	0x20000084
 80008c0:	20000088 	.word	0x20000088

080008c4 <__sfputc_r>:
 80008c4:	6893      	ldr	r3, [r2, #8]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	b410      	push	{r4}
 80008cc:	6093      	str	r3, [r2, #8]
 80008ce:	da08      	bge.n	80008e2 <__sfputc_r+0x1e>
 80008d0:	6994      	ldr	r4, [r2, #24]
 80008d2:	42a3      	cmp	r3, r4
 80008d4:	db01      	blt.n	80008da <__sfputc_r+0x16>
 80008d6:	290a      	cmp	r1, #10
 80008d8:	d103      	bne.n	80008e2 <__sfputc_r+0x1e>
 80008da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80008de:	f000 bb33 	b.w	8000f48 <__swbuf_r>
 80008e2:	6813      	ldr	r3, [r2, #0]
 80008e4:	1c58      	adds	r0, r3, #1
 80008e6:	6010      	str	r0, [r2, #0]
 80008e8:	7019      	strb	r1, [r3, #0]
 80008ea:	4608      	mov	r0, r1
 80008ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <__sfputs_r>:
 80008f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008f4:	4606      	mov	r6, r0
 80008f6:	460f      	mov	r7, r1
 80008f8:	4614      	mov	r4, r2
 80008fa:	18d5      	adds	r5, r2, r3
 80008fc:	42ac      	cmp	r4, r5
 80008fe:	d101      	bne.n	8000904 <__sfputs_r+0x12>
 8000900:	2000      	movs	r0, #0
 8000902:	e007      	b.n	8000914 <__sfputs_r+0x22>
 8000904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000908:	463a      	mov	r2, r7
 800090a:	4630      	mov	r0, r6
 800090c:	f7ff ffda 	bl	80008c4 <__sfputc_r>
 8000910:	1c43      	adds	r3, r0, #1
 8000912:	d1f3      	bne.n	80008fc <__sfputs_r+0xa>
 8000914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000918 <_vfiprintf_r>:
 8000918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800091c:	460d      	mov	r5, r1
 800091e:	b09d      	sub	sp, #116	; 0x74
 8000920:	4614      	mov	r4, r2
 8000922:	4698      	mov	r8, r3
 8000924:	4606      	mov	r6, r0
 8000926:	b118      	cbz	r0, 8000930 <_vfiprintf_r+0x18>
 8000928:	6983      	ldr	r3, [r0, #24]
 800092a:	b90b      	cbnz	r3, 8000930 <_vfiprintf_r+0x18>
 800092c:	f7ff fed0 	bl	80006d0 <__sinit>
 8000930:	4b89      	ldr	r3, [pc, #548]	; (8000b58 <_vfiprintf_r+0x240>)
 8000932:	429d      	cmp	r5, r3
 8000934:	d11b      	bne.n	800096e <_vfiprintf_r+0x56>
 8000936:	6875      	ldr	r5, [r6, #4]
 8000938:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800093a:	07d9      	lsls	r1, r3, #31
 800093c:	d405      	bmi.n	800094a <_vfiprintf_r+0x32>
 800093e:	89ab      	ldrh	r3, [r5, #12]
 8000940:	059a      	lsls	r2, r3, #22
 8000942:	d402      	bmi.n	800094a <_vfiprintf_r+0x32>
 8000944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000946:	f7ff ff61 	bl	800080c <__retarget_lock_acquire_recursive>
 800094a:	89ab      	ldrh	r3, [r5, #12]
 800094c:	071b      	lsls	r3, r3, #28
 800094e:	d501      	bpl.n	8000954 <_vfiprintf_r+0x3c>
 8000950:	692b      	ldr	r3, [r5, #16]
 8000952:	b9eb      	cbnz	r3, 8000990 <_vfiprintf_r+0x78>
 8000954:	4629      	mov	r1, r5
 8000956:	4630      	mov	r0, r6
 8000958:	f000 fb5a 	bl	8001010 <__swsetup_r>
 800095c:	b1c0      	cbz	r0, 8000990 <_vfiprintf_r+0x78>
 800095e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000960:	07dc      	lsls	r4, r3, #31
 8000962:	d50e      	bpl.n	8000982 <_vfiprintf_r+0x6a>
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	b01d      	add	sp, #116	; 0x74
 800096a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800096e:	4b7b      	ldr	r3, [pc, #492]	; (8000b5c <_vfiprintf_r+0x244>)
 8000970:	429d      	cmp	r5, r3
 8000972:	d101      	bne.n	8000978 <_vfiprintf_r+0x60>
 8000974:	68b5      	ldr	r5, [r6, #8]
 8000976:	e7df      	b.n	8000938 <_vfiprintf_r+0x20>
 8000978:	4b79      	ldr	r3, [pc, #484]	; (8000b60 <_vfiprintf_r+0x248>)
 800097a:	429d      	cmp	r5, r3
 800097c:	bf08      	it	eq
 800097e:	68f5      	ldreq	r5, [r6, #12]
 8000980:	e7da      	b.n	8000938 <_vfiprintf_r+0x20>
 8000982:	89ab      	ldrh	r3, [r5, #12]
 8000984:	0598      	lsls	r0, r3, #22
 8000986:	d4ed      	bmi.n	8000964 <_vfiprintf_r+0x4c>
 8000988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800098a:	f7ff ff40 	bl	800080e <__retarget_lock_release_recursive>
 800098e:	e7e9      	b.n	8000964 <_vfiprintf_r+0x4c>
 8000990:	2300      	movs	r3, #0
 8000992:	9309      	str	r3, [sp, #36]	; 0x24
 8000994:	2320      	movs	r3, #32
 8000996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800099a:	f8cd 800c 	str.w	r8, [sp, #12]
 800099e:	2330      	movs	r3, #48	; 0x30
 80009a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000b64 <_vfiprintf_r+0x24c>
 80009a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80009a8:	f04f 0901 	mov.w	r9, #1
 80009ac:	4623      	mov	r3, r4
 80009ae:	469a      	mov	sl, r3
 80009b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80009b4:	b10a      	cbz	r2, 80009ba <_vfiprintf_r+0xa2>
 80009b6:	2a25      	cmp	r2, #37	; 0x25
 80009b8:	d1f9      	bne.n	80009ae <_vfiprintf_r+0x96>
 80009ba:	ebba 0b04 	subs.w	fp, sl, r4
 80009be:	d00b      	beq.n	80009d8 <_vfiprintf_r+0xc0>
 80009c0:	465b      	mov	r3, fp
 80009c2:	4622      	mov	r2, r4
 80009c4:	4629      	mov	r1, r5
 80009c6:	4630      	mov	r0, r6
 80009c8:	f7ff ff93 	bl	80008f2 <__sfputs_r>
 80009cc:	3001      	adds	r0, #1
 80009ce:	f000 80aa 	beq.w	8000b26 <_vfiprintf_r+0x20e>
 80009d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80009d4:	445a      	add	r2, fp
 80009d6:	9209      	str	r2, [sp, #36]	; 0x24
 80009d8:	f89a 3000 	ldrb.w	r3, [sl]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f000 80a2 	beq.w	8000b26 <_vfiprintf_r+0x20e>
 80009e2:	2300      	movs	r3, #0
 80009e4:	f04f 32ff 	mov.w	r2, #4294967295
 80009e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80009ec:	f10a 0a01 	add.w	sl, sl, #1
 80009f0:	9304      	str	r3, [sp, #16]
 80009f2:	9307      	str	r3, [sp, #28]
 80009f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80009f8:	931a      	str	r3, [sp, #104]	; 0x68
 80009fa:	4654      	mov	r4, sl
 80009fc:	2205      	movs	r2, #5
 80009fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a02:	4858      	ldr	r0, [pc, #352]	; (8000b64 <_vfiprintf_r+0x24c>)
 8000a04:	f7ff fc04 	bl	8000210 <memchr>
 8000a08:	9a04      	ldr	r2, [sp, #16]
 8000a0a:	b9d8      	cbnz	r0, 8000a44 <_vfiprintf_r+0x12c>
 8000a0c:	06d1      	lsls	r1, r2, #27
 8000a0e:	bf44      	itt	mi
 8000a10:	2320      	movmi	r3, #32
 8000a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a16:	0713      	lsls	r3, r2, #28
 8000a18:	bf44      	itt	mi
 8000a1a:	232b      	movmi	r3, #43	; 0x2b
 8000a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a20:	f89a 3000 	ldrb.w	r3, [sl]
 8000a24:	2b2a      	cmp	r3, #42	; 0x2a
 8000a26:	d015      	beq.n	8000a54 <_vfiprintf_r+0x13c>
 8000a28:	9a07      	ldr	r2, [sp, #28]
 8000a2a:	4654      	mov	r4, sl
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f04f 0c0a 	mov.w	ip, #10
 8000a32:	4621      	mov	r1, r4
 8000a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a38:	3b30      	subs	r3, #48	; 0x30
 8000a3a:	2b09      	cmp	r3, #9
 8000a3c:	d94e      	bls.n	8000adc <_vfiprintf_r+0x1c4>
 8000a3e:	b1b0      	cbz	r0, 8000a6e <_vfiprintf_r+0x156>
 8000a40:	9207      	str	r2, [sp, #28]
 8000a42:	e014      	b.n	8000a6e <_vfiprintf_r+0x156>
 8000a44:	eba0 0308 	sub.w	r3, r0, r8
 8000a48:	fa09 f303 	lsl.w	r3, r9, r3
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	9304      	str	r3, [sp, #16]
 8000a50:	46a2      	mov	sl, r4
 8000a52:	e7d2      	b.n	80009fa <_vfiprintf_r+0xe2>
 8000a54:	9b03      	ldr	r3, [sp, #12]
 8000a56:	1d19      	adds	r1, r3, #4
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	9103      	str	r1, [sp, #12]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	bfbb      	ittet	lt
 8000a60:	425b      	neglt	r3, r3
 8000a62:	f042 0202 	orrlt.w	r2, r2, #2
 8000a66:	9307      	strge	r3, [sp, #28]
 8000a68:	9307      	strlt	r3, [sp, #28]
 8000a6a:	bfb8      	it	lt
 8000a6c:	9204      	strlt	r2, [sp, #16]
 8000a6e:	7823      	ldrb	r3, [r4, #0]
 8000a70:	2b2e      	cmp	r3, #46	; 0x2e
 8000a72:	d10c      	bne.n	8000a8e <_vfiprintf_r+0x176>
 8000a74:	7863      	ldrb	r3, [r4, #1]
 8000a76:	2b2a      	cmp	r3, #42	; 0x2a
 8000a78:	d135      	bne.n	8000ae6 <_vfiprintf_r+0x1ce>
 8000a7a:	9b03      	ldr	r3, [sp, #12]
 8000a7c:	1d1a      	adds	r2, r3, #4
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	9203      	str	r2, [sp, #12]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	bfb8      	it	lt
 8000a86:	f04f 33ff 	movlt.w	r3, #4294967295
 8000a8a:	3402      	adds	r4, #2
 8000a8c:	9305      	str	r3, [sp, #20]
 8000a8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000b74 <_vfiprintf_r+0x25c>
 8000a92:	7821      	ldrb	r1, [r4, #0]
 8000a94:	2203      	movs	r2, #3
 8000a96:	4650      	mov	r0, sl
 8000a98:	f7ff fbba 	bl	8000210 <memchr>
 8000a9c:	b140      	cbz	r0, 8000ab0 <_vfiprintf_r+0x198>
 8000a9e:	2340      	movs	r3, #64	; 0x40
 8000aa0:	eba0 000a 	sub.w	r0, r0, sl
 8000aa4:	fa03 f000 	lsl.w	r0, r3, r0
 8000aa8:	9b04      	ldr	r3, [sp, #16]
 8000aaa:	4303      	orrs	r3, r0
 8000aac:	3401      	adds	r4, #1
 8000aae:	9304      	str	r3, [sp, #16]
 8000ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ab4:	482c      	ldr	r0, [pc, #176]	; (8000b68 <_vfiprintf_r+0x250>)
 8000ab6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000aba:	2206      	movs	r2, #6
 8000abc:	f7ff fba8 	bl	8000210 <memchr>
 8000ac0:	2800      	cmp	r0, #0
 8000ac2:	d03f      	beq.n	8000b44 <_vfiprintf_r+0x22c>
 8000ac4:	4b29      	ldr	r3, [pc, #164]	; (8000b6c <_vfiprintf_r+0x254>)
 8000ac6:	bb1b      	cbnz	r3, 8000b10 <_vfiprintf_r+0x1f8>
 8000ac8:	9b03      	ldr	r3, [sp, #12]
 8000aca:	3307      	adds	r3, #7
 8000acc:	f023 0307 	bic.w	r3, r3, #7
 8000ad0:	3308      	adds	r3, #8
 8000ad2:	9303      	str	r3, [sp, #12]
 8000ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ad6:	443b      	add	r3, r7
 8000ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8000ada:	e767      	b.n	80009ac <_vfiprintf_r+0x94>
 8000adc:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ae0:	460c      	mov	r4, r1
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	e7a5      	b.n	8000a32 <_vfiprintf_r+0x11a>
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	3401      	adds	r4, #1
 8000aea:	9305      	str	r3, [sp, #20]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f04f 0c0a 	mov.w	ip, #10
 8000af2:	4620      	mov	r0, r4
 8000af4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000af8:	3a30      	subs	r2, #48	; 0x30
 8000afa:	2a09      	cmp	r2, #9
 8000afc:	d903      	bls.n	8000b06 <_vfiprintf_r+0x1ee>
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0c5      	beq.n	8000a8e <_vfiprintf_r+0x176>
 8000b02:	9105      	str	r1, [sp, #20]
 8000b04:	e7c3      	b.n	8000a8e <_vfiprintf_r+0x176>
 8000b06:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b0a:	4604      	mov	r4, r0
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e7f0      	b.n	8000af2 <_vfiprintf_r+0x1da>
 8000b10:	ab03      	add	r3, sp, #12
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	462a      	mov	r2, r5
 8000b16:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <_vfiprintf_r+0x258>)
 8000b18:	a904      	add	r1, sp, #16
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	f3af 8000 	nop.w
 8000b20:	4607      	mov	r7, r0
 8000b22:	1c78      	adds	r0, r7, #1
 8000b24:	d1d6      	bne.n	8000ad4 <_vfiprintf_r+0x1bc>
 8000b26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b28:	07d9      	lsls	r1, r3, #31
 8000b2a:	d405      	bmi.n	8000b38 <_vfiprintf_r+0x220>
 8000b2c:	89ab      	ldrh	r3, [r5, #12]
 8000b2e:	059a      	lsls	r2, r3, #22
 8000b30:	d402      	bmi.n	8000b38 <_vfiprintf_r+0x220>
 8000b32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b34:	f7ff fe6b 	bl	800080e <__retarget_lock_release_recursive>
 8000b38:	89ab      	ldrh	r3, [r5, #12]
 8000b3a:	065b      	lsls	r3, r3, #25
 8000b3c:	f53f af12 	bmi.w	8000964 <_vfiprintf_r+0x4c>
 8000b40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000b42:	e711      	b.n	8000968 <_vfiprintf_r+0x50>
 8000b44:	ab03      	add	r3, sp, #12
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	462a      	mov	r2, r5
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <_vfiprintf_r+0x258>)
 8000b4c:	a904      	add	r1, sp, #16
 8000b4e:	4630      	mov	r0, r6
 8000b50:	f000 f880 	bl	8000c54 <_printf_i>
 8000b54:	e7e4      	b.n	8000b20 <_vfiprintf_r+0x208>
 8000b56:	bf00      	nop
 8000b58:	080014fc 	.word	0x080014fc
 8000b5c:	0800151c 	.word	0x0800151c
 8000b60:	080014dc 	.word	0x080014dc
 8000b64:	0800153c 	.word	0x0800153c
 8000b68:	08001546 	.word	0x08001546
 8000b6c:	00000000 	.word	0x00000000
 8000b70:	080008f3 	.word	0x080008f3
 8000b74:	08001542 	.word	0x08001542

08000b78 <_printf_common>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	4616      	mov	r6, r2
 8000b7e:	4699      	mov	r9, r3
 8000b80:	688a      	ldr	r2, [r1, #8]
 8000b82:	690b      	ldr	r3, [r1, #16]
 8000b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	bfb8      	it	lt
 8000b8c:	4613      	movlt	r3, r2
 8000b8e:	6033      	str	r3, [r6, #0]
 8000b90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000b94:	4607      	mov	r7, r0
 8000b96:	460c      	mov	r4, r1
 8000b98:	b10a      	cbz	r2, 8000b9e <_printf_common+0x26>
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	6033      	str	r3, [r6, #0]
 8000b9e:	6823      	ldr	r3, [r4, #0]
 8000ba0:	0699      	lsls	r1, r3, #26
 8000ba2:	bf42      	ittt	mi
 8000ba4:	6833      	ldrmi	r3, [r6, #0]
 8000ba6:	3302      	addmi	r3, #2
 8000ba8:	6033      	strmi	r3, [r6, #0]
 8000baa:	6825      	ldr	r5, [r4, #0]
 8000bac:	f015 0506 	ands.w	r5, r5, #6
 8000bb0:	d106      	bne.n	8000bc0 <_printf_common+0x48>
 8000bb2:	f104 0a19 	add.w	sl, r4, #25
 8000bb6:	68e3      	ldr	r3, [r4, #12]
 8000bb8:	6832      	ldr	r2, [r6, #0]
 8000bba:	1a9b      	subs	r3, r3, r2
 8000bbc:	42ab      	cmp	r3, r5
 8000bbe:	dc26      	bgt.n	8000c0e <_printf_common+0x96>
 8000bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000bc4:	1e13      	subs	r3, r2, #0
 8000bc6:	6822      	ldr	r2, [r4, #0]
 8000bc8:	bf18      	it	ne
 8000bca:	2301      	movne	r3, #1
 8000bcc:	0692      	lsls	r2, r2, #26
 8000bce:	d42b      	bmi.n	8000c28 <_printf_common+0xb0>
 8000bd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000bd4:	4649      	mov	r1, r9
 8000bd6:	4638      	mov	r0, r7
 8000bd8:	47c0      	blx	r8
 8000bda:	3001      	adds	r0, #1
 8000bdc:	d01e      	beq.n	8000c1c <_printf_common+0xa4>
 8000bde:	6823      	ldr	r3, [r4, #0]
 8000be0:	68e5      	ldr	r5, [r4, #12]
 8000be2:	6832      	ldr	r2, [r6, #0]
 8000be4:	f003 0306 	and.w	r3, r3, #6
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	bf08      	it	eq
 8000bec:	1aad      	subeq	r5, r5, r2
 8000bee:	68a3      	ldr	r3, [r4, #8]
 8000bf0:	6922      	ldr	r2, [r4, #16]
 8000bf2:	bf0c      	ite	eq
 8000bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000bf8:	2500      	movne	r5, #0
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	bfc4      	itt	gt
 8000bfe:	1a9b      	subgt	r3, r3, r2
 8000c00:	18ed      	addgt	r5, r5, r3
 8000c02:	2600      	movs	r6, #0
 8000c04:	341a      	adds	r4, #26
 8000c06:	42b5      	cmp	r5, r6
 8000c08:	d11a      	bne.n	8000c40 <_printf_common+0xc8>
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	e008      	b.n	8000c20 <_printf_common+0xa8>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	4652      	mov	r2, sl
 8000c12:	4649      	mov	r1, r9
 8000c14:	4638      	mov	r0, r7
 8000c16:	47c0      	blx	r8
 8000c18:	3001      	adds	r0, #1
 8000c1a:	d103      	bne.n	8000c24 <_printf_common+0xac>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c24:	3501      	adds	r5, #1
 8000c26:	e7c6      	b.n	8000bb6 <_printf_common+0x3e>
 8000c28:	18e1      	adds	r1, r4, r3
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	2030      	movs	r0, #48	; 0x30
 8000c2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000c32:	4422      	add	r2, r4
 8000c34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	e7c7      	b.n	8000bd0 <_printf_common+0x58>
 8000c40:	2301      	movs	r3, #1
 8000c42:	4622      	mov	r2, r4
 8000c44:	4649      	mov	r1, r9
 8000c46:	4638      	mov	r0, r7
 8000c48:	47c0      	blx	r8
 8000c4a:	3001      	adds	r0, #1
 8000c4c:	d0e6      	beq.n	8000c1c <_printf_common+0xa4>
 8000c4e:	3601      	adds	r6, #1
 8000c50:	e7d9      	b.n	8000c06 <_printf_common+0x8e>
	...

08000c54 <_printf_i>:
 8000c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c58:	460c      	mov	r4, r1
 8000c5a:	4691      	mov	r9, r2
 8000c5c:	7e27      	ldrb	r7, [r4, #24]
 8000c5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000c60:	2f78      	cmp	r7, #120	; 0x78
 8000c62:	4680      	mov	r8, r0
 8000c64:	469a      	mov	sl, r3
 8000c66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c6a:	d807      	bhi.n	8000c7c <_printf_i+0x28>
 8000c6c:	2f62      	cmp	r7, #98	; 0x62
 8000c6e:	d80a      	bhi.n	8000c86 <_printf_i+0x32>
 8000c70:	2f00      	cmp	r7, #0
 8000c72:	f000 80d8 	beq.w	8000e26 <_printf_i+0x1d2>
 8000c76:	2f58      	cmp	r7, #88	; 0x58
 8000c78:	f000 80a3 	beq.w	8000dc2 <_printf_i+0x16e>
 8000c7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000c80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000c84:	e03a      	b.n	8000cfc <_printf_i+0xa8>
 8000c86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000c8a:	2b15      	cmp	r3, #21
 8000c8c:	d8f6      	bhi.n	8000c7c <_printf_i+0x28>
 8000c8e:	a001      	add	r0, pc, #4	; (adr r0, 8000c94 <_printf_i+0x40>)
 8000c90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000c94:	08000ced 	.word	0x08000ced
 8000c98:	08000d01 	.word	0x08000d01
 8000c9c:	08000c7d 	.word	0x08000c7d
 8000ca0:	08000c7d 	.word	0x08000c7d
 8000ca4:	08000c7d 	.word	0x08000c7d
 8000ca8:	08000c7d 	.word	0x08000c7d
 8000cac:	08000d01 	.word	0x08000d01
 8000cb0:	08000c7d 	.word	0x08000c7d
 8000cb4:	08000c7d 	.word	0x08000c7d
 8000cb8:	08000c7d 	.word	0x08000c7d
 8000cbc:	08000c7d 	.word	0x08000c7d
 8000cc0:	08000e0d 	.word	0x08000e0d
 8000cc4:	08000d31 	.word	0x08000d31
 8000cc8:	08000def 	.word	0x08000def
 8000ccc:	08000c7d 	.word	0x08000c7d
 8000cd0:	08000c7d 	.word	0x08000c7d
 8000cd4:	08000e2f 	.word	0x08000e2f
 8000cd8:	08000c7d 	.word	0x08000c7d
 8000cdc:	08000d31 	.word	0x08000d31
 8000ce0:	08000c7d 	.word	0x08000c7d
 8000ce4:	08000c7d 	.word	0x08000c7d
 8000ce8:	08000df7 	.word	0x08000df7
 8000cec:	680b      	ldr	r3, [r1, #0]
 8000cee:	1d1a      	adds	r2, r3, #4
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	600a      	str	r2, [r1, #0]
 8000cf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e0a3      	b.n	8000e48 <_printf_i+0x1f4>
 8000d00:	6825      	ldr	r5, [r4, #0]
 8000d02:	6808      	ldr	r0, [r1, #0]
 8000d04:	062e      	lsls	r6, r5, #24
 8000d06:	f100 0304 	add.w	r3, r0, #4
 8000d0a:	d50a      	bpl.n	8000d22 <_printf_i+0xce>
 8000d0c:	6805      	ldr	r5, [r0, #0]
 8000d0e:	600b      	str	r3, [r1, #0]
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	da03      	bge.n	8000d1c <_printf_i+0xc8>
 8000d14:	232d      	movs	r3, #45	; 0x2d
 8000d16:	426d      	negs	r5, r5
 8000d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000d1c:	485e      	ldr	r0, [pc, #376]	; (8000e98 <_printf_i+0x244>)
 8000d1e:	230a      	movs	r3, #10
 8000d20:	e019      	b.n	8000d56 <_printf_i+0x102>
 8000d22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000d26:	6805      	ldr	r5, [r0, #0]
 8000d28:	600b      	str	r3, [r1, #0]
 8000d2a:	bf18      	it	ne
 8000d2c:	b22d      	sxthne	r5, r5
 8000d2e:	e7ef      	b.n	8000d10 <_printf_i+0xbc>
 8000d30:	680b      	ldr	r3, [r1, #0]
 8000d32:	6825      	ldr	r5, [r4, #0]
 8000d34:	1d18      	adds	r0, r3, #4
 8000d36:	6008      	str	r0, [r1, #0]
 8000d38:	0628      	lsls	r0, r5, #24
 8000d3a:	d501      	bpl.n	8000d40 <_printf_i+0xec>
 8000d3c:	681d      	ldr	r5, [r3, #0]
 8000d3e:	e002      	b.n	8000d46 <_printf_i+0xf2>
 8000d40:	0669      	lsls	r1, r5, #25
 8000d42:	d5fb      	bpl.n	8000d3c <_printf_i+0xe8>
 8000d44:	881d      	ldrh	r5, [r3, #0]
 8000d46:	4854      	ldr	r0, [pc, #336]	; (8000e98 <_printf_i+0x244>)
 8000d48:	2f6f      	cmp	r7, #111	; 0x6f
 8000d4a:	bf0c      	ite	eq
 8000d4c:	2308      	moveq	r3, #8
 8000d4e:	230a      	movne	r3, #10
 8000d50:	2100      	movs	r1, #0
 8000d52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000d56:	6866      	ldr	r6, [r4, #4]
 8000d58:	60a6      	str	r6, [r4, #8]
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	bfa2      	ittt	ge
 8000d5e:	6821      	ldrge	r1, [r4, #0]
 8000d60:	f021 0104 	bicge.w	r1, r1, #4
 8000d64:	6021      	strge	r1, [r4, #0]
 8000d66:	b90d      	cbnz	r5, 8000d6c <_printf_i+0x118>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d04d      	beq.n	8000e08 <_printf_i+0x1b4>
 8000d6c:	4616      	mov	r6, r2
 8000d6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8000d72:	fb03 5711 	mls	r7, r3, r1, r5
 8000d76:	5dc7      	ldrb	r7, [r0, r7]
 8000d78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000d7c:	462f      	mov	r7, r5
 8000d7e:	42bb      	cmp	r3, r7
 8000d80:	460d      	mov	r5, r1
 8000d82:	d9f4      	bls.n	8000d6e <_printf_i+0x11a>
 8000d84:	2b08      	cmp	r3, #8
 8000d86:	d10b      	bne.n	8000da0 <_printf_i+0x14c>
 8000d88:	6823      	ldr	r3, [r4, #0]
 8000d8a:	07df      	lsls	r7, r3, #31
 8000d8c:	d508      	bpl.n	8000da0 <_printf_i+0x14c>
 8000d8e:	6923      	ldr	r3, [r4, #16]
 8000d90:	6861      	ldr	r1, [r4, #4]
 8000d92:	4299      	cmp	r1, r3
 8000d94:	bfde      	ittt	le
 8000d96:	2330      	movle	r3, #48	; 0x30
 8000d98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000d9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000da0:	1b92      	subs	r2, r2, r6
 8000da2:	6122      	str	r2, [r4, #16]
 8000da4:	f8cd a000 	str.w	sl, [sp]
 8000da8:	464b      	mov	r3, r9
 8000daa:	aa03      	add	r2, sp, #12
 8000dac:	4621      	mov	r1, r4
 8000dae:	4640      	mov	r0, r8
 8000db0:	f7ff fee2 	bl	8000b78 <_printf_common>
 8000db4:	3001      	adds	r0, #1
 8000db6:	d14c      	bne.n	8000e52 <_printf_i+0x1fe>
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	b004      	add	sp, #16
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	4835      	ldr	r0, [pc, #212]	; (8000e98 <_printf_i+0x244>)
 8000dc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	680e      	ldr	r6, [r1, #0]
 8000dcc:	061f      	lsls	r7, r3, #24
 8000dce:	f856 5b04 	ldr.w	r5, [r6], #4
 8000dd2:	600e      	str	r6, [r1, #0]
 8000dd4:	d514      	bpl.n	8000e00 <_printf_i+0x1ac>
 8000dd6:	07d9      	lsls	r1, r3, #31
 8000dd8:	bf44      	itt	mi
 8000dda:	f043 0320 	orrmi.w	r3, r3, #32
 8000dde:	6023      	strmi	r3, [r4, #0]
 8000de0:	b91d      	cbnz	r5, 8000dea <_printf_i+0x196>
 8000de2:	6823      	ldr	r3, [r4, #0]
 8000de4:	f023 0320 	bic.w	r3, r3, #32
 8000de8:	6023      	str	r3, [r4, #0]
 8000dea:	2310      	movs	r3, #16
 8000dec:	e7b0      	b.n	8000d50 <_printf_i+0xfc>
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	f043 0320 	orr.w	r3, r3, #32
 8000df4:	6023      	str	r3, [r4, #0]
 8000df6:	2378      	movs	r3, #120	; 0x78
 8000df8:	4828      	ldr	r0, [pc, #160]	; (8000e9c <_printf_i+0x248>)
 8000dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000dfe:	e7e3      	b.n	8000dc8 <_printf_i+0x174>
 8000e00:	065e      	lsls	r6, r3, #25
 8000e02:	bf48      	it	mi
 8000e04:	b2ad      	uxthmi	r5, r5
 8000e06:	e7e6      	b.n	8000dd6 <_printf_i+0x182>
 8000e08:	4616      	mov	r6, r2
 8000e0a:	e7bb      	b.n	8000d84 <_printf_i+0x130>
 8000e0c:	680b      	ldr	r3, [r1, #0]
 8000e0e:	6826      	ldr	r6, [r4, #0]
 8000e10:	6960      	ldr	r0, [r4, #20]
 8000e12:	1d1d      	adds	r5, r3, #4
 8000e14:	600d      	str	r5, [r1, #0]
 8000e16:	0635      	lsls	r5, r6, #24
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	d501      	bpl.n	8000e20 <_printf_i+0x1cc>
 8000e1c:	6018      	str	r0, [r3, #0]
 8000e1e:	e002      	b.n	8000e26 <_printf_i+0x1d2>
 8000e20:	0671      	lsls	r1, r6, #25
 8000e22:	d5fb      	bpl.n	8000e1c <_printf_i+0x1c8>
 8000e24:	8018      	strh	r0, [r3, #0]
 8000e26:	2300      	movs	r3, #0
 8000e28:	6123      	str	r3, [r4, #16]
 8000e2a:	4616      	mov	r6, r2
 8000e2c:	e7ba      	b.n	8000da4 <_printf_i+0x150>
 8000e2e:	680b      	ldr	r3, [r1, #0]
 8000e30:	1d1a      	adds	r2, r3, #4
 8000e32:	600a      	str	r2, [r1, #0]
 8000e34:	681e      	ldr	r6, [r3, #0]
 8000e36:	6862      	ldr	r2, [r4, #4]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	f7ff f9e8 	bl	8000210 <memchr>
 8000e40:	b108      	cbz	r0, 8000e46 <_printf_i+0x1f2>
 8000e42:	1b80      	subs	r0, r0, r6
 8000e44:	6060      	str	r0, [r4, #4]
 8000e46:	6863      	ldr	r3, [r4, #4]
 8000e48:	6123      	str	r3, [r4, #16]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e50:	e7a8      	b.n	8000da4 <_printf_i+0x150>
 8000e52:	6923      	ldr	r3, [r4, #16]
 8000e54:	4632      	mov	r2, r6
 8000e56:	4649      	mov	r1, r9
 8000e58:	4640      	mov	r0, r8
 8000e5a:	47d0      	blx	sl
 8000e5c:	3001      	adds	r0, #1
 8000e5e:	d0ab      	beq.n	8000db8 <_printf_i+0x164>
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	079b      	lsls	r3, r3, #30
 8000e64:	d413      	bmi.n	8000e8e <_printf_i+0x23a>
 8000e66:	68e0      	ldr	r0, [r4, #12]
 8000e68:	9b03      	ldr	r3, [sp, #12]
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	bfb8      	it	lt
 8000e6e:	4618      	movlt	r0, r3
 8000e70:	e7a4      	b.n	8000dbc <_printf_i+0x168>
 8000e72:	2301      	movs	r3, #1
 8000e74:	4632      	mov	r2, r6
 8000e76:	4649      	mov	r1, r9
 8000e78:	4640      	mov	r0, r8
 8000e7a:	47d0      	blx	sl
 8000e7c:	3001      	adds	r0, #1
 8000e7e:	d09b      	beq.n	8000db8 <_printf_i+0x164>
 8000e80:	3501      	adds	r5, #1
 8000e82:	68e3      	ldr	r3, [r4, #12]
 8000e84:	9903      	ldr	r1, [sp, #12]
 8000e86:	1a5b      	subs	r3, r3, r1
 8000e88:	42ab      	cmp	r3, r5
 8000e8a:	dcf2      	bgt.n	8000e72 <_printf_i+0x21e>
 8000e8c:	e7eb      	b.n	8000e66 <_printf_i+0x212>
 8000e8e:	2500      	movs	r5, #0
 8000e90:	f104 0619 	add.w	r6, r4, #25
 8000e94:	e7f5      	b.n	8000e82 <_printf_i+0x22e>
 8000e96:	bf00      	nop
 8000e98:	0800154d 	.word	0x0800154d
 8000e9c:	0800155e 	.word	0x0800155e

08000ea0 <_sbrk_r>:
 8000ea0:	b538      	push	{r3, r4, r5, lr}
 8000ea2:	4d06      	ldr	r5, [pc, #24]	; (8000ebc <_sbrk_r+0x1c>)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	602b      	str	r3, [r5, #0]
 8000eac:	f7ff fa78 	bl	80003a0 <_sbrk>
 8000eb0:	1c43      	adds	r3, r0, #1
 8000eb2:	d102      	bne.n	8000eba <_sbrk_r+0x1a>
 8000eb4:	682b      	ldr	r3, [r5, #0]
 8000eb6:	b103      	cbz	r3, 8000eba <_sbrk_r+0x1a>
 8000eb8:	6023      	str	r3, [r4, #0]
 8000eba:	bd38      	pop	{r3, r4, r5, pc}
 8000ebc:	20000098 	.word	0x20000098

08000ec0 <__sread>:
 8000ec0:	b510      	push	{r4, lr}
 8000ec2:	460c      	mov	r4, r1
 8000ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ec8:	f000 fab4 	bl	8001434 <_read_r>
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	bfab      	itete	ge
 8000ed0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000ed2:	89a3      	ldrhlt	r3, [r4, #12]
 8000ed4:	181b      	addge	r3, r3, r0
 8000ed6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000eda:	bfac      	ite	ge
 8000edc:	6563      	strge	r3, [r4, #84]	; 0x54
 8000ede:	81a3      	strhlt	r3, [r4, #12]
 8000ee0:	bd10      	pop	{r4, pc}

08000ee2 <__swrite>:
 8000ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ee6:	461f      	mov	r7, r3
 8000ee8:	898b      	ldrh	r3, [r1, #12]
 8000eea:	05db      	lsls	r3, r3, #23
 8000eec:	4605      	mov	r5, r0
 8000eee:	460c      	mov	r4, r1
 8000ef0:	4616      	mov	r6, r2
 8000ef2:	d505      	bpl.n	8000f00 <__swrite+0x1e>
 8000ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ef8:	2302      	movs	r3, #2
 8000efa:	2200      	movs	r2, #0
 8000efc:	f000 f9c8 	bl	8001290 <_lseek_r>
 8000f00:	89a3      	ldrh	r3, [r4, #12]
 8000f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f0a:	81a3      	strh	r3, [r4, #12]
 8000f0c:	4632      	mov	r2, r6
 8000f0e:	463b      	mov	r3, r7
 8000f10:	4628      	mov	r0, r5
 8000f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f16:	f000 b869 	b.w	8000fec <_write_r>

08000f1a <__sseek>:
 8000f1a:	b510      	push	{r4, lr}
 8000f1c:	460c      	mov	r4, r1
 8000f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f22:	f000 f9b5 	bl	8001290 <_lseek_r>
 8000f26:	1c43      	adds	r3, r0, #1
 8000f28:	89a3      	ldrh	r3, [r4, #12]
 8000f2a:	bf15      	itete	ne
 8000f2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f36:	81a3      	strheq	r3, [r4, #12]
 8000f38:	bf18      	it	ne
 8000f3a:	81a3      	strhne	r3, [r4, #12]
 8000f3c:	bd10      	pop	{r4, pc}

08000f3e <__sclose>:
 8000f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f42:	f000 b8d3 	b.w	80010ec <_close_r>
	...

08000f48 <__swbuf_r>:
 8000f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4a:	460e      	mov	r6, r1
 8000f4c:	4614      	mov	r4, r2
 8000f4e:	4605      	mov	r5, r0
 8000f50:	b118      	cbz	r0, 8000f5a <__swbuf_r+0x12>
 8000f52:	6983      	ldr	r3, [r0, #24]
 8000f54:	b90b      	cbnz	r3, 8000f5a <__swbuf_r+0x12>
 8000f56:	f7ff fbbb 	bl	80006d0 <__sinit>
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <__swbuf_r+0x98>)
 8000f5c:	429c      	cmp	r4, r3
 8000f5e:	d12b      	bne.n	8000fb8 <__swbuf_r+0x70>
 8000f60:	686c      	ldr	r4, [r5, #4]
 8000f62:	69a3      	ldr	r3, [r4, #24]
 8000f64:	60a3      	str	r3, [r4, #8]
 8000f66:	89a3      	ldrh	r3, [r4, #12]
 8000f68:	071a      	lsls	r2, r3, #28
 8000f6a:	d52f      	bpl.n	8000fcc <__swbuf_r+0x84>
 8000f6c:	6923      	ldr	r3, [r4, #16]
 8000f6e:	b36b      	cbz	r3, 8000fcc <__swbuf_r+0x84>
 8000f70:	6923      	ldr	r3, [r4, #16]
 8000f72:	6820      	ldr	r0, [r4, #0]
 8000f74:	1ac0      	subs	r0, r0, r3
 8000f76:	6963      	ldr	r3, [r4, #20]
 8000f78:	b2f6      	uxtb	r6, r6
 8000f7a:	4283      	cmp	r3, r0
 8000f7c:	4637      	mov	r7, r6
 8000f7e:	dc04      	bgt.n	8000f8a <__swbuf_r+0x42>
 8000f80:	4621      	mov	r1, r4
 8000f82:	4628      	mov	r0, r5
 8000f84:	f000 f948 	bl	8001218 <_fflush_r>
 8000f88:	bb30      	cbnz	r0, 8000fd8 <__swbuf_r+0x90>
 8000f8a:	68a3      	ldr	r3, [r4, #8]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	60a3      	str	r3, [r4, #8]
 8000f90:	6823      	ldr	r3, [r4, #0]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	6022      	str	r2, [r4, #0]
 8000f96:	701e      	strb	r6, [r3, #0]
 8000f98:	6963      	ldr	r3, [r4, #20]
 8000f9a:	3001      	adds	r0, #1
 8000f9c:	4283      	cmp	r3, r0
 8000f9e:	d004      	beq.n	8000faa <__swbuf_r+0x62>
 8000fa0:	89a3      	ldrh	r3, [r4, #12]
 8000fa2:	07db      	lsls	r3, r3, #31
 8000fa4:	d506      	bpl.n	8000fb4 <__swbuf_r+0x6c>
 8000fa6:	2e0a      	cmp	r6, #10
 8000fa8:	d104      	bne.n	8000fb4 <__swbuf_r+0x6c>
 8000faa:	4621      	mov	r1, r4
 8000fac:	4628      	mov	r0, r5
 8000fae:	f000 f933 	bl	8001218 <_fflush_r>
 8000fb2:	b988      	cbnz	r0, 8000fd8 <__swbuf_r+0x90>
 8000fb4:	4638      	mov	r0, r7
 8000fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <__swbuf_r+0x9c>)
 8000fba:	429c      	cmp	r4, r3
 8000fbc:	d101      	bne.n	8000fc2 <__swbuf_r+0x7a>
 8000fbe:	68ac      	ldr	r4, [r5, #8]
 8000fc0:	e7cf      	b.n	8000f62 <__swbuf_r+0x1a>
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <__swbuf_r+0xa0>)
 8000fc4:	429c      	cmp	r4, r3
 8000fc6:	bf08      	it	eq
 8000fc8:	68ec      	ldreq	r4, [r5, #12]
 8000fca:	e7ca      	b.n	8000f62 <__swbuf_r+0x1a>
 8000fcc:	4621      	mov	r1, r4
 8000fce:	4628      	mov	r0, r5
 8000fd0:	f000 f81e 	bl	8001010 <__swsetup_r>
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	d0cb      	beq.n	8000f70 <__swbuf_r+0x28>
 8000fd8:	f04f 37ff 	mov.w	r7, #4294967295
 8000fdc:	e7ea      	b.n	8000fb4 <__swbuf_r+0x6c>
 8000fde:	bf00      	nop
 8000fe0:	080014fc 	.word	0x080014fc
 8000fe4:	0800151c 	.word	0x0800151c
 8000fe8:	080014dc 	.word	0x080014dc

08000fec <_write_r>:
 8000fec:	b538      	push	{r3, r4, r5, lr}
 8000fee:	4d07      	ldr	r5, [pc, #28]	; (800100c <_write_r+0x20>)
 8000ff0:	4604      	mov	r4, r0
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	602a      	str	r2, [r5, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f7ff f97f 	bl	80002fe <_write>
 8001000:	1c43      	adds	r3, r0, #1
 8001002:	d102      	bne.n	800100a <_write_r+0x1e>
 8001004:	682b      	ldr	r3, [r5, #0]
 8001006:	b103      	cbz	r3, 800100a <_write_r+0x1e>
 8001008:	6023      	str	r3, [r4, #0]
 800100a:	bd38      	pop	{r3, r4, r5, pc}
 800100c:	20000098 	.word	0x20000098

08001010 <__swsetup_r>:
 8001010:	4b32      	ldr	r3, [pc, #200]	; (80010dc <__swsetup_r+0xcc>)
 8001012:	b570      	push	{r4, r5, r6, lr}
 8001014:	681d      	ldr	r5, [r3, #0]
 8001016:	4606      	mov	r6, r0
 8001018:	460c      	mov	r4, r1
 800101a:	b125      	cbz	r5, 8001026 <__swsetup_r+0x16>
 800101c:	69ab      	ldr	r3, [r5, #24]
 800101e:	b913      	cbnz	r3, 8001026 <__swsetup_r+0x16>
 8001020:	4628      	mov	r0, r5
 8001022:	f7ff fb55 	bl	80006d0 <__sinit>
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <__swsetup_r+0xd0>)
 8001028:	429c      	cmp	r4, r3
 800102a:	d10f      	bne.n	800104c <__swsetup_r+0x3c>
 800102c:	686c      	ldr	r4, [r5, #4]
 800102e:	89a3      	ldrh	r3, [r4, #12]
 8001030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001034:	0719      	lsls	r1, r3, #28
 8001036:	d42c      	bmi.n	8001092 <__swsetup_r+0x82>
 8001038:	06dd      	lsls	r5, r3, #27
 800103a:	d411      	bmi.n	8001060 <__swsetup_r+0x50>
 800103c:	2309      	movs	r3, #9
 800103e:	6033      	str	r3, [r6, #0]
 8001040:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001044:	81a3      	strh	r3, [r4, #12]
 8001046:	f04f 30ff 	mov.w	r0, #4294967295
 800104a:	e03e      	b.n	80010ca <__swsetup_r+0xba>
 800104c:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <__swsetup_r+0xd4>)
 800104e:	429c      	cmp	r4, r3
 8001050:	d101      	bne.n	8001056 <__swsetup_r+0x46>
 8001052:	68ac      	ldr	r4, [r5, #8]
 8001054:	e7eb      	b.n	800102e <__swsetup_r+0x1e>
 8001056:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <__swsetup_r+0xd8>)
 8001058:	429c      	cmp	r4, r3
 800105a:	bf08      	it	eq
 800105c:	68ec      	ldreq	r4, [r5, #12]
 800105e:	e7e6      	b.n	800102e <__swsetup_r+0x1e>
 8001060:	0758      	lsls	r0, r3, #29
 8001062:	d512      	bpl.n	800108a <__swsetup_r+0x7a>
 8001064:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001066:	b141      	cbz	r1, 800107a <__swsetup_r+0x6a>
 8001068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800106c:	4299      	cmp	r1, r3
 800106e:	d002      	beq.n	8001076 <__swsetup_r+0x66>
 8001070:	4630      	mov	r0, r6
 8001072:	f000 f98f 	bl	8001394 <_free_r>
 8001076:	2300      	movs	r3, #0
 8001078:	6363      	str	r3, [r4, #52]	; 0x34
 800107a:	89a3      	ldrh	r3, [r4, #12]
 800107c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001080:	81a3      	strh	r3, [r4, #12]
 8001082:	2300      	movs	r3, #0
 8001084:	6063      	str	r3, [r4, #4]
 8001086:	6923      	ldr	r3, [r4, #16]
 8001088:	6023      	str	r3, [r4, #0]
 800108a:	89a3      	ldrh	r3, [r4, #12]
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	81a3      	strh	r3, [r4, #12]
 8001092:	6923      	ldr	r3, [r4, #16]
 8001094:	b94b      	cbnz	r3, 80010aa <__swsetup_r+0x9a>
 8001096:	89a3      	ldrh	r3, [r4, #12]
 8001098:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800109c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010a0:	d003      	beq.n	80010aa <__swsetup_r+0x9a>
 80010a2:	4621      	mov	r1, r4
 80010a4:	4630      	mov	r0, r6
 80010a6:	f000 f929 	bl	80012fc <__smakebuf_r>
 80010aa:	89a0      	ldrh	r0, [r4, #12]
 80010ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80010b0:	f010 0301 	ands.w	r3, r0, #1
 80010b4:	d00a      	beq.n	80010cc <__swsetup_r+0xbc>
 80010b6:	2300      	movs	r3, #0
 80010b8:	60a3      	str	r3, [r4, #8]
 80010ba:	6963      	ldr	r3, [r4, #20]
 80010bc:	425b      	negs	r3, r3
 80010be:	61a3      	str	r3, [r4, #24]
 80010c0:	6923      	ldr	r3, [r4, #16]
 80010c2:	b943      	cbnz	r3, 80010d6 <__swsetup_r+0xc6>
 80010c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80010c8:	d1ba      	bne.n	8001040 <__swsetup_r+0x30>
 80010ca:	bd70      	pop	{r4, r5, r6, pc}
 80010cc:	0781      	lsls	r1, r0, #30
 80010ce:	bf58      	it	pl
 80010d0:	6963      	ldrpl	r3, [r4, #20]
 80010d2:	60a3      	str	r3, [r4, #8]
 80010d4:	e7f4      	b.n	80010c0 <__swsetup_r+0xb0>
 80010d6:	2000      	movs	r0, #0
 80010d8:	e7f7      	b.n	80010ca <__swsetup_r+0xba>
 80010da:	bf00      	nop
 80010dc:	20000000 	.word	0x20000000
 80010e0:	080014fc 	.word	0x080014fc
 80010e4:	0800151c 	.word	0x0800151c
 80010e8:	080014dc 	.word	0x080014dc

080010ec <_close_r>:
 80010ec:	b538      	push	{r3, r4, r5, lr}
 80010ee:	4d06      	ldr	r5, [pc, #24]	; (8001108 <_close_r+0x1c>)
 80010f0:	2300      	movs	r3, #0
 80010f2:	4604      	mov	r4, r0
 80010f4:	4608      	mov	r0, r1
 80010f6:	602b      	str	r3, [r5, #0]
 80010f8:	f7ff f91d 	bl	8000336 <_close>
 80010fc:	1c43      	adds	r3, r0, #1
 80010fe:	d102      	bne.n	8001106 <_close_r+0x1a>
 8001100:	682b      	ldr	r3, [r5, #0]
 8001102:	b103      	cbz	r3, 8001106 <_close_r+0x1a>
 8001104:	6023      	str	r3, [r4, #0]
 8001106:	bd38      	pop	{r3, r4, r5, pc}
 8001108:	20000098 	.word	0x20000098

0800110c <__sflush_r>:
 800110c:	898a      	ldrh	r2, [r1, #12]
 800110e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001112:	4605      	mov	r5, r0
 8001114:	0710      	lsls	r0, r2, #28
 8001116:	460c      	mov	r4, r1
 8001118:	d458      	bmi.n	80011cc <__sflush_r+0xc0>
 800111a:	684b      	ldr	r3, [r1, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	dc05      	bgt.n	800112c <__sflush_r+0x20>
 8001120:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001122:	2b00      	cmp	r3, #0
 8001124:	dc02      	bgt.n	800112c <__sflush_r+0x20>
 8001126:	2000      	movs	r0, #0
 8001128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800112c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800112e:	2e00      	cmp	r6, #0
 8001130:	d0f9      	beq.n	8001126 <__sflush_r+0x1a>
 8001132:	2300      	movs	r3, #0
 8001134:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001138:	682f      	ldr	r7, [r5, #0]
 800113a:	602b      	str	r3, [r5, #0]
 800113c:	d032      	beq.n	80011a4 <__sflush_r+0x98>
 800113e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001140:	89a3      	ldrh	r3, [r4, #12]
 8001142:	075a      	lsls	r2, r3, #29
 8001144:	d505      	bpl.n	8001152 <__sflush_r+0x46>
 8001146:	6863      	ldr	r3, [r4, #4]
 8001148:	1ac0      	subs	r0, r0, r3
 800114a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800114c:	b10b      	cbz	r3, 8001152 <__sflush_r+0x46>
 800114e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001150:	1ac0      	subs	r0, r0, r3
 8001152:	2300      	movs	r3, #0
 8001154:	4602      	mov	r2, r0
 8001156:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001158:	6a21      	ldr	r1, [r4, #32]
 800115a:	4628      	mov	r0, r5
 800115c:	47b0      	blx	r6
 800115e:	1c43      	adds	r3, r0, #1
 8001160:	89a3      	ldrh	r3, [r4, #12]
 8001162:	d106      	bne.n	8001172 <__sflush_r+0x66>
 8001164:	6829      	ldr	r1, [r5, #0]
 8001166:	291d      	cmp	r1, #29
 8001168:	d82c      	bhi.n	80011c4 <__sflush_r+0xb8>
 800116a:	4a2a      	ldr	r2, [pc, #168]	; (8001214 <__sflush_r+0x108>)
 800116c:	40ca      	lsrs	r2, r1
 800116e:	07d6      	lsls	r6, r2, #31
 8001170:	d528      	bpl.n	80011c4 <__sflush_r+0xb8>
 8001172:	2200      	movs	r2, #0
 8001174:	6062      	str	r2, [r4, #4]
 8001176:	04d9      	lsls	r1, r3, #19
 8001178:	6922      	ldr	r2, [r4, #16]
 800117a:	6022      	str	r2, [r4, #0]
 800117c:	d504      	bpl.n	8001188 <__sflush_r+0x7c>
 800117e:	1c42      	adds	r2, r0, #1
 8001180:	d101      	bne.n	8001186 <__sflush_r+0x7a>
 8001182:	682b      	ldr	r3, [r5, #0]
 8001184:	b903      	cbnz	r3, 8001188 <__sflush_r+0x7c>
 8001186:	6560      	str	r0, [r4, #84]	; 0x54
 8001188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800118a:	602f      	str	r7, [r5, #0]
 800118c:	2900      	cmp	r1, #0
 800118e:	d0ca      	beq.n	8001126 <__sflush_r+0x1a>
 8001190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001194:	4299      	cmp	r1, r3
 8001196:	d002      	beq.n	800119e <__sflush_r+0x92>
 8001198:	4628      	mov	r0, r5
 800119a:	f000 f8fb 	bl	8001394 <_free_r>
 800119e:	2000      	movs	r0, #0
 80011a0:	6360      	str	r0, [r4, #52]	; 0x34
 80011a2:	e7c1      	b.n	8001128 <__sflush_r+0x1c>
 80011a4:	6a21      	ldr	r1, [r4, #32]
 80011a6:	2301      	movs	r3, #1
 80011a8:	4628      	mov	r0, r5
 80011aa:	47b0      	blx	r6
 80011ac:	1c41      	adds	r1, r0, #1
 80011ae:	d1c7      	bne.n	8001140 <__sflush_r+0x34>
 80011b0:	682b      	ldr	r3, [r5, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0c4      	beq.n	8001140 <__sflush_r+0x34>
 80011b6:	2b1d      	cmp	r3, #29
 80011b8:	d001      	beq.n	80011be <__sflush_r+0xb2>
 80011ba:	2b16      	cmp	r3, #22
 80011bc:	d101      	bne.n	80011c2 <__sflush_r+0xb6>
 80011be:	602f      	str	r7, [r5, #0]
 80011c0:	e7b1      	b.n	8001126 <__sflush_r+0x1a>
 80011c2:	89a3      	ldrh	r3, [r4, #12]
 80011c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c8:	81a3      	strh	r3, [r4, #12]
 80011ca:	e7ad      	b.n	8001128 <__sflush_r+0x1c>
 80011cc:	690f      	ldr	r7, [r1, #16]
 80011ce:	2f00      	cmp	r7, #0
 80011d0:	d0a9      	beq.n	8001126 <__sflush_r+0x1a>
 80011d2:	0793      	lsls	r3, r2, #30
 80011d4:	680e      	ldr	r6, [r1, #0]
 80011d6:	bf08      	it	eq
 80011d8:	694b      	ldreq	r3, [r1, #20]
 80011da:	600f      	str	r7, [r1, #0]
 80011dc:	bf18      	it	ne
 80011de:	2300      	movne	r3, #0
 80011e0:	eba6 0807 	sub.w	r8, r6, r7
 80011e4:	608b      	str	r3, [r1, #8]
 80011e6:	f1b8 0f00 	cmp.w	r8, #0
 80011ea:	dd9c      	ble.n	8001126 <__sflush_r+0x1a>
 80011ec:	6a21      	ldr	r1, [r4, #32]
 80011ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80011f0:	4643      	mov	r3, r8
 80011f2:	463a      	mov	r2, r7
 80011f4:	4628      	mov	r0, r5
 80011f6:	47b0      	blx	r6
 80011f8:	2800      	cmp	r0, #0
 80011fa:	dc06      	bgt.n	800120a <__sflush_r+0xfe>
 80011fc:	89a3      	ldrh	r3, [r4, #12]
 80011fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001202:	81a3      	strh	r3, [r4, #12]
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	e78e      	b.n	8001128 <__sflush_r+0x1c>
 800120a:	4407      	add	r7, r0
 800120c:	eba8 0800 	sub.w	r8, r8, r0
 8001210:	e7e9      	b.n	80011e6 <__sflush_r+0xda>
 8001212:	bf00      	nop
 8001214:	20400001 	.word	0x20400001

08001218 <_fflush_r>:
 8001218:	b538      	push	{r3, r4, r5, lr}
 800121a:	690b      	ldr	r3, [r1, #16]
 800121c:	4605      	mov	r5, r0
 800121e:	460c      	mov	r4, r1
 8001220:	b913      	cbnz	r3, 8001228 <_fflush_r+0x10>
 8001222:	2500      	movs	r5, #0
 8001224:	4628      	mov	r0, r5
 8001226:	bd38      	pop	{r3, r4, r5, pc}
 8001228:	b118      	cbz	r0, 8001232 <_fflush_r+0x1a>
 800122a:	6983      	ldr	r3, [r0, #24]
 800122c:	b90b      	cbnz	r3, 8001232 <_fflush_r+0x1a>
 800122e:	f7ff fa4f 	bl	80006d0 <__sinit>
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <_fflush_r+0x6c>)
 8001234:	429c      	cmp	r4, r3
 8001236:	d11b      	bne.n	8001270 <_fflush_r+0x58>
 8001238:	686c      	ldr	r4, [r5, #4]
 800123a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0ef      	beq.n	8001222 <_fflush_r+0xa>
 8001242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001244:	07d0      	lsls	r0, r2, #31
 8001246:	d404      	bmi.n	8001252 <_fflush_r+0x3a>
 8001248:	0599      	lsls	r1, r3, #22
 800124a:	d402      	bmi.n	8001252 <_fflush_r+0x3a>
 800124c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800124e:	f7ff fadd 	bl	800080c <__retarget_lock_acquire_recursive>
 8001252:	4628      	mov	r0, r5
 8001254:	4621      	mov	r1, r4
 8001256:	f7ff ff59 	bl	800110c <__sflush_r>
 800125a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800125c:	07da      	lsls	r2, r3, #31
 800125e:	4605      	mov	r5, r0
 8001260:	d4e0      	bmi.n	8001224 <_fflush_r+0xc>
 8001262:	89a3      	ldrh	r3, [r4, #12]
 8001264:	059b      	lsls	r3, r3, #22
 8001266:	d4dd      	bmi.n	8001224 <_fflush_r+0xc>
 8001268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800126a:	f7ff fad0 	bl	800080e <__retarget_lock_release_recursive>
 800126e:	e7d9      	b.n	8001224 <_fflush_r+0xc>
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <_fflush_r+0x70>)
 8001272:	429c      	cmp	r4, r3
 8001274:	d101      	bne.n	800127a <_fflush_r+0x62>
 8001276:	68ac      	ldr	r4, [r5, #8]
 8001278:	e7df      	b.n	800123a <_fflush_r+0x22>
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <_fflush_r+0x74>)
 800127c:	429c      	cmp	r4, r3
 800127e:	bf08      	it	eq
 8001280:	68ec      	ldreq	r4, [r5, #12]
 8001282:	e7da      	b.n	800123a <_fflush_r+0x22>
 8001284:	080014fc 	.word	0x080014fc
 8001288:	0800151c 	.word	0x0800151c
 800128c:	080014dc 	.word	0x080014dc

08001290 <_lseek_r>:
 8001290:	b538      	push	{r3, r4, r5, lr}
 8001292:	4d07      	ldr	r5, [pc, #28]	; (80012b0 <_lseek_r+0x20>)
 8001294:	4604      	mov	r4, r0
 8001296:	4608      	mov	r0, r1
 8001298:	4611      	mov	r1, r2
 800129a:	2200      	movs	r2, #0
 800129c:	602a      	str	r2, [r5, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	f7ff f870 	bl	8000384 <_lseek>
 80012a4:	1c43      	adds	r3, r0, #1
 80012a6:	d102      	bne.n	80012ae <_lseek_r+0x1e>
 80012a8:	682b      	ldr	r3, [r5, #0]
 80012aa:	b103      	cbz	r3, 80012ae <_lseek_r+0x1e>
 80012ac:	6023      	str	r3, [r4, #0]
 80012ae:	bd38      	pop	{r3, r4, r5, pc}
 80012b0:	20000098 	.word	0x20000098

080012b4 <__swhatbuf_r>:
 80012b4:	b570      	push	{r4, r5, r6, lr}
 80012b6:	460e      	mov	r6, r1
 80012b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012bc:	2900      	cmp	r1, #0
 80012be:	b096      	sub	sp, #88	; 0x58
 80012c0:	4614      	mov	r4, r2
 80012c2:	461d      	mov	r5, r3
 80012c4:	da07      	bge.n	80012d6 <__swhatbuf_r+0x22>
 80012c6:	2300      	movs	r3, #0
 80012c8:	602b      	str	r3, [r5, #0]
 80012ca:	89b3      	ldrh	r3, [r6, #12]
 80012cc:	061a      	lsls	r2, r3, #24
 80012ce:	d410      	bmi.n	80012f2 <__swhatbuf_r+0x3e>
 80012d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d4:	e00e      	b.n	80012f4 <__swhatbuf_r+0x40>
 80012d6:	466a      	mov	r2, sp
 80012d8:	f000 f8be 	bl	8001458 <_fstat_r>
 80012dc:	2800      	cmp	r0, #0
 80012de:	dbf2      	blt.n	80012c6 <__swhatbuf_r+0x12>
 80012e0:	9a01      	ldr	r2, [sp, #4]
 80012e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80012e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80012ea:	425a      	negs	r2, r3
 80012ec:	415a      	adcs	r2, r3
 80012ee:	602a      	str	r2, [r5, #0]
 80012f0:	e7ee      	b.n	80012d0 <__swhatbuf_r+0x1c>
 80012f2:	2340      	movs	r3, #64	; 0x40
 80012f4:	2000      	movs	r0, #0
 80012f6:	6023      	str	r3, [r4, #0]
 80012f8:	b016      	add	sp, #88	; 0x58
 80012fa:	bd70      	pop	{r4, r5, r6, pc}

080012fc <__smakebuf_r>:
 80012fc:	898b      	ldrh	r3, [r1, #12]
 80012fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001300:	079d      	lsls	r5, r3, #30
 8001302:	4606      	mov	r6, r0
 8001304:	460c      	mov	r4, r1
 8001306:	d507      	bpl.n	8001318 <__smakebuf_r+0x1c>
 8001308:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800130c:	6023      	str	r3, [r4, #0]
 800130e:	6123      	str	r3, [r4, #16]
 8001310:	2301      	movs	r3, #1
 8001312:	6163      	str	r3, [r4, #20]
 8001314:	b002      	add	sp, #8
 8001316:	bd70      	pop	{r4, r5, r6, pc}
 8001318:	ab01      	add	r3, sp, #4
 800131a:	466a      	mov	r2, sp
 800131c:	f7ff ffca 	bl	80012b4 <__swhatbuf_r>
 8001320:	9900      	ldr	r1, [sp, #0]
 8001322:	4605      	mov	r5, r0
 8001324:	4630      	mov	r0, r6
 8001326:	f7ff fa73 	bl	8000810 <_malloc_r>
 800132a:	b948      	cbnz	r0, 8001340 <__smakebuf_r+0x44>
 800132c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001330:	059a      	lsls	r2, r3, #22
 8001332:	d4ef      	bmi.n	8001314 <__smakebuf_r+0x18>
 8001334:	f023 0303 	bic.w	r3, r3, #3
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	81a3      	strh	r3, [r4, #12]
 800133e:	e7e3      	b.n	8001308 <__smakebuf_r+0xc>
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <__smakebuf_r+0x7c>)
 8001342:	62b3      	str	r3, [r6, #40]	; 0x28
 8001344:	89a3      	ldrh	r3, [r4, #12]
 8001346:	6020      	str	r0, [r4, #0]
 8001348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134c:	81a3      	strh	r3, [r4, #12]
 800134e:	9b00      	ldr	r3, [sp, #0]
 8001350:	6163      	str	r3, [r4, #20]
 8001352:	9b01      	ldr	r3, [sp, #4]
 8001354:	6120      	str	r0, [r4, #16]
 8001356:	b15b      	cbz	r3, 8001370 <__smakebuf_r+0x74>
 8001358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800135c:	4630      	mov	r0, r6
 800135e:	f000 f88d 	bl	800147c <_isatty_r>
 8001362:	b128      	cbz	r0, 8001370 <__smakebuf_r+0x74>
 8001364:	89a3      	ldrh	r3, [r4, #12]
 8001366:	f023 0303 	bic.w	r3, r3, #3
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	81a3      	strh	r3, [r4, #12]
 8001370:	89a0      	ldrh	r0, [r4, #12]
 8001372:	4305      	orrs	r5, r0
 8001374:	81a5      	strh	r5, [r4, #12]
 8001376:	e7cd      	b.n	8001314 <__smakebuf_r+0x18>
 8001378:	08000669 	.word	0x08000669

0800137c <__malloc_lock>:
 800137c:	4801      	ldr	r0, [pc, #4]	; (8001384 <__malloc_lock+0x8>)
 800137e:	f7ff ba45 	b.w	800080c <__retarget_lock_acquire_recursive>
 8001382:	bf00      	nop
 8001384:	20000090 	.word	0x20000090

08001388 <__malloc_unlock>:
 8001388:	4801      	ldr	r0, [pc, #4]	; (8001390 <__malloc_unlock+0x8>)
 800138a:	f7ff ba40 	b.w	800080e <__retarget_lock_release_recursive>
 800138e:	bf00      	nop
 8001390:	20000090 	.word	0x20000090

08001394 <_free_r>:
 8001394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001396:	2900      	cmp	r1, #0
 8001398:	d048      	beq.n	800142c <_free_r+0x98>
 800139a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800139e:	9001      	str	r0, [sp, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f1a1 0404 	sub.w	r4, r1, #4
 80013a6:	bfb8      	it	lt
 80013a8:	18e4      	addlt	r4, r4, r3
 80013aa:	f7ff ffe7 	bl	800137c <__malloc_lock>
 80013ae:	4a20      	ldr	r2, [pc, #128]	; (8001430 <_free_r+0x9c>)
 80013b0:	9801      	ldr	r0, [sp, #4]
 80013b2:	6813      	ldr	r3, [r2, #0]
 80013b4:	4615      	mov	r5, r2
 80013b6:	b933      	cbnz	r3, 80013c6 <_free_r+0x32>
 80013b8:	6063      	str	r3, [r4, #4]
 80013ba:	6014      	str	r4, [r2, #0]
 80013bc:	b003      	add	sp, #12
 80013be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80013c2:	f7ff bfe1 	b.w	8001388 <__malloc_unlock>
 80013c6:	42a3      	cmp	r3, r4
 80013c8:	d90b      	bls.n	80013e2 <_free_r+0x4e>
 80013ca:	6821      	ldr	r1, [r4, #0]
 80013cc:	1862      	adds	r2, r4, r1
 80013ce:	4293      	cmp	r3, r2
 80013d0:	bf04      	itt	eq
 80013d2:	681a      	ldreq	r2, [r3, #0]
 80013d4:	685b      	ldreq	r3, [r3, #4]
 80013d6:	6063      	str	r3, [r4, #4]
 80013d8:	bf04      	itt	eq
 80013da:	1852      	addeq	r2, r2, r1
 80013dc:	6022      	streq	r2, [r4, #0]
 80013de:	602c      	str	r4, [r5, #0]
 80013e0:	e7ec      	b.n	80013bc <_free_r+0x28>
 80013e2:	461a      	mov	r2, r3
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	b10b      	cbz	r3, 80013ec <_free_r+0x58>
 80013e8:	42a3      	cmp	r3, r4
 80013ea:	d9fa      	bls.n	80013e2 <_free_r+0x4e>
 80013ec:	6811      	ldr	r1, [r2, #0]
 80013ee:	1855      	adds	r5, r2, r1
 80013f0:	42a5      	cmp	r5, r4
 80013f2:	d10b      	bne.n	800140c <_free_r+0x78>
 80013f4:	6824      	ldr	r4, [r4, #0]
 80013f6:	4421      	add	r1, r4
 80013f8:	1854      	adds	r4, r2, r1
 80013fa:	42a3      	cmp	r3, r4
 80013fc:	6011      	str	r1, [r2, #0]
 80013fe:	d1dd      	bne.n	80013bc <_free_r+0x28>
 8001400:	681c      	ldr	r4, [r3, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	6053      	str	r3, [r2, #4]
 8001406:	4421      	add	r1, r4
 8001408:	6011      	str	r1, [r2, #0]
 800140a:	e7d7      	b.n	80013bc <_free_r+0x28>
 800140c:	d902      	bls.n	8001414 <_free_r+0x80>
 800140e:	230c      	movs	r3, #12
 8001410:	6003      	str	r3, [r0, #0]
 8001412:	e7d3      	b.n	80013bc <_free_r+0x28>
 8001414:	6825      	ldr	r5, [r4, #0]
 8001416:	1961      	adds	r1, r4, r5
 8001418:	428b      	cmp	r3, r1
 800141a:	bf04      	itt	eq
 800141c:	6819      	ldreq	r1, [r3, #0]
 800141e:	685b      	ldreq	r3, [r3, #4]
 8001420:	6063      	str	r3, [r4, #4]
 8001422:	bf04      	itt	eq
 8001424:	1949      	addeq	r1, r1, r5
 8001426:	6021      	streq	r1, [r4, #0]
 8001428:	6054      	str	r4, [r2, #4]
 800142a:	e7c7      	b.n	80013bc <_free_r+0x28>
 800142c:	b003      	add	sp, #12
 800142e:	bd30      	pop	{r4, r5, pc}
 8001430:	20000084 	.word	0x20000084

08001434 <_read_r>:
 8001434:	b538      	push	{r3, r4, r5, lr}
 8001436:	4d07      	ldr	r5, [pc, #28]	; (8001454 <_read_r+0x20>)
 8001438:	4604      	mov	r4, r0
 800143a:	4608      	mov	r0, r1
 800143c:	4611      	mov	r1, r2
 800143e:	2200      	movs	r2, #0
 8001440:	602a      	str	r2, [r5, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	f7fe ff3e 	bl	80002c4 <_read>
 8001448:	1c43      	adds	r3, r0, #1
 800144a:	d102      	bne.n	8001452 <_read_r+0x1e>
 800144c:	682b      	ldr	r3, [r5, #0]
 800144e:	b103      	cbz	r3, 8001452 <_read_r+0x1e>
 8001450:	6023      	str	r3, [r4, #0]
 8001452:	bd38      	pop	{r3, r4, r5, pc}
 8001454:	20000098 	.word	0x20000098

08001458 <_fstat_r>:
 8001458:	b538      	push	{r3, r4, r5, lr}
 800145a:	4d07      	ldr	r5, [pc, #28]	; (8001478 <_fstat_r+0x20>)
 800145c:	2300      	movs	r3, #0
 800145e:	4604      	mov	r4, r0
 8001460:	4608      	mov	r0, r1
 8001462:	4611      	mov	r1, r2
 8001464:	602b      	str	r3, [r5, #0]
 8001466:	f7fe ff72 	bl	800034e <_fstat>
 800146a:	1c43      	adds	r3, r0, #1
 800146c:	d102      	bne.n	8001474 <_fstat_r+0x1c>
 800146e:	682b      	ldr	r3, [r5, #0]
 8001470:	b103      	cbz	r3, 8001474 <_fstat_r+0x1c>
 8001472:	6023      	str	r3, [r4, #0]
 8001474:	bd38      	pop	{r3, r4, r5, pc}
 8001476:	bf00      	nop
 8001478:	20000098 	.word	0x20000098

0800147c <_isatty_r>:
 800147c:	b538      	push	{r3, r4, r5, lr}
 800147e:	4d06      	ldr	r5, [pc, #24]	; (8001498 <_isatty_r+0x1c>)
 8001480:	2300      	movs	r3, #0
 8001482:	4604      	mov	r4, r0
 8001484:	4608      	mov	r0, r1
 8001486:	602b      	str	r3, [r5, #0]
 8001488:	f7fe ff71 	bl	800036e <_isatty>
 800148c:	1c43      	adds	r3, r0, #1
 800148e:	d102      	bne.n	8001496 <_isatty_r+0x1a>
 8001490:	682b      	ldr	r3, [r5, #0]
 8001492:	b103      	cbz	r3, 8001496 <_isatty_r+0x1a>
 8001494:	6023      	str	r3, [r4, #0]
 8001496:	bd38      	pop	{r3, r4, r5, pc}
 8001498:	20000098 	.word	0x20000098

0800149c <_init>:
 800149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149e:	bf00      	nop
 80014a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014a2:	bc08      	pop	{r3}
 80014a4:	469e      	mov	lr, r3
 80014a6:	4770      	bx	lr

080014a8 <_fini>:
 80014a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014aa:	bf00      	nop
 80014ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ae:	bc08      	pop	{r3}
 80014b0:	469e      	mov	lr, r3
 80014b2:	4770      	bx	lr
